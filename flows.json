[
    {
        "id": "55a762ae72fa441b",
        "type": "tab",
        "label": "Main Game Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "47c0e0ae667846a9",
        "type": "tab",
        "label": "Field Nodes Config / Debug",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "175af8efcea2d591",
        "type": "tab",
        "label": "Field Status Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f6f035102302ba5a",
        "type": "tab",
        "label": "Bldg / FS Callbacks",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d32826a1611e0622",
        "type": "tab",
        "label": "Trees & Trenches",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f3ec5d556e86f8d0",
        "type": "tab",
        "label": "Field Config",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6a070793fb470a03",
        "type": "group",
        "z": "55a762ae72fa441b",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "e1ba7bc1352dbb74",
            "5725302ea02fb9eb",
            "ff606f8c806a3eac",
            "28a544304a1e4303",
            "b52637f4da03c425",
            "a3b9dda68a07d22c",
            "0941e20c1244d3c4",
            "95c484054d952cb6",
            "17966a2f1dd06930",
            "3697150f5332d13d",
            "822ce164ff689dfc",
            "5903df706bf17bf9",
            "31c4db3eb2f36e59"
        ],
        "x": 34,
        "y": 79,
        "w": 872,
        "h": 322
    },
    {
        "id": "18778eda46bd5b07",
        "type": "group",
        "z": "55a762ae72fa441b",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "93750bbcea38e7fe",
            "442e921eed2365ac",
            "aa5c2742d22be7f8",
            "fd128583b8d87f7f",
            "bdb7dfde4f3191a6",
            "4eb1999fbc3aab57"
        ],
        "x": 54,
        "y": 879,
        "w": 652,
        "h": 182
    },
    {
        "id": "4a4f80625f8ea163",
        "type": "group",
        "z": "55a762ae72fa441b",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "85965edc.72971",
            "5efe17e007074ad1",
            "672af1a8627b7e63",
            "e33ce82b402295fc",
            "227f2d5a2ea24037",
            "da02d40547f5f97a",
            "f2be5d92f9656966"
        ],
        "x": 974,
        "y": 39,
        "w": 712,
        "h": 222
    },
    {
        "id": "6f159bf7a82f4dfa",
        "type": "group",
        "z": "55a762ae72fa441b",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "ee998e797cc6bfa3",
            "5bf648170501ee01",
            "2b2a6d295740d392",
            "ec7979310fe9e00f",
            "28011fcca82837fc"
        ],
        "x": 54,
        "y": 1079,
        "w": 1398,
        "h": 868
    },
    {
        "id": "6a8702296ddd22a1",
        "type": "group",
        "z": "55a762ae72fa441b",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "fd280fb139a56e3e",
            "9321df77664c4496",
            "82a8466517112ffd",
            "c612b81a64bb9759",
            "ee7fad842ebd85de",
            "ae0759e01e0881af",
            "18a7e5b4e99c326d",
            "aadcf8e2c074df27",
            "140ccabed0093842",
            "a7ed1ac2a675515d",
            "3b77325dbc1afa0c",
            "f80fcf16add6a94c",
            "d1995509f950a1a9",
            "da8215e65b543ef9",
            "4b6a57a81a1ea4ce",
            "ea98a939f9a52953",
            "2335df53b4766297",
            "6d217ae324a7acc7",
            "b139a3ab9696d743",
            "0ff21611a0176572",
            "691a5afc5b52b78a",
            "45e70a9ad7899e4d",
            "9cbdb9d52fe7cf9a",
            "9bc5be050fadf6b6",
            "40c211c8e4f6180d",
            "e4346dc3857e09be",
            "6e9c04bbdc0780af",
            "53ad0d9118b96995",
            "1c79cd9a48ef18c9"
        ],
        "x": 54,
        "y": 1979,
        "w": 1692,
        "h": 582
    },
    {
        "id": "4788e8d5cbe11d8f",
        "type": "group",
        "z": "55a762ae72fa441b",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "f006f834cd4dc2be",
            "550ba5d34605ad4c",
            "11b308030fbc13bf",
            "77191df86e82050c",
            "c46aa67248fd589a",
            "d0e47829bbab10d2",
            "ff0af9f0a11f5393",
            "f6d8fde6109ac979",
            "6177f53a1a1c40ea",
            "6f5b0006051e39ef",
            "5addcc4a4e5261bd",
            "67dbb7b83e823038",
            "41518b531082b3d7",
            "d8060f8e62e726ce"
        ],
        "x": 54,
        "y": 2579,
        "w": 872,
        "h": 362
    },
    {
        "id": "0d233ae99a4c6065",
        "type": "group",
        "z": "47c0e0ae667846a9",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "7a5f520857017bbb",
            "70c149ec65fb102c",
            "5f3e0a85eea68705"
        ],
        "x": 34,
        "y": 19
    },
    {
        "id": "aa7cdd8f3125703c",
        "type": "group",
        "z": "47c0e0ae667846a9",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "0e16be23a79edb49",
            "af913b1474ed43d9",
            "4f65e1b1c3249fbc",
            "39d591f75ab6581f",
            "6e6816ac951a5c0f"
        ],
        "x": 34,
        "y": 159
    },
    {
        "id": "2ac942eccf98a996",
        "type": "group",
        "z": "175af8efcea2d591",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "0bb4f2dd1a0c4bda",
            "8ddea564d172bf3f",
            "171f62c6c1563726",
            "05cbae4faf594123",
            "deaae49be7b573b0",
            "892376e5bd117bc9",
            "c5d69c3b0f5e30ee",
            "0e3ebf9316c50718",
            "cc34e7492d373681"
        ],
        "x": 94,
        "y": 59
    },
    {
        "id": "b2c04e106e7697f0",
        "type": "group",
        "z": "55a762ae72fa441b",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "d56b2c69ab7a5b19",
            "c71621e5f8d62525",
            "3324776758a34ef8",
            "14d53b51ae10a6d7",
            "da290e77a88988a7",
            "3ddb4866a6ecb8fe",
            "250504d69a42ec07",
            "a43cfe8c60aa1766",
            "03cc0a5688f63569",
            "8b9f85415994242a",
            "81525ae27ca9e82c",
            "b92ea91a45968087",
            "6cbc63bf1ddca5ee",
            "7ec8575c8ae051af"
        ],
        "x": 54,
        "y": 3059,
        "w": 992,
        "h": 462
    },
    {
        "id": "284c27310b25477c",
        "type": "group",
        "z": "f6f035102302ba5a",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "0416ea6909311b42",
            "187c6afe9262807c",
            "8078387b8154fc28",
            "5acfacf7a05cc895",
            "926f27b7e8249ddb",
            "ed2d399b29970928",
            "5f0bcff5c4ed6ec4",
            "f986ab9711daf36b",
            "085de4503ad6ec20",
            "63f18a575dc37f3b",
            "dda9a78374edd0d2",
            "a25ecc470396a417",
            "619a82dad0d84d31",
            "2a37db221e4919dc",
            "fe84ce88167ea094",
            "5c0e589cb02e5ad4",
            "6983c6fb1a960333",
            "8fa76cd3d132c117"
        ],
        "x": 84,
        "y": 67
    },
    {
        "id": "5f1037ebc6dbd72f",
        "type": "group",
        "z": "f6f035102302ba5a",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "7138aeefb2263d68",
            "f8afe1542a91baa2",
            "f976aafaf0f9a3c1",
            "2d3d077a6a33a90f",
            "19c221d99629ee7a"
        ],
        "x": 74,
        "y": 567
    },
    {
        "id": "459fe488a5804676",
        "type": "group",
        "z": "f6f035102302ba5a",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "42500fdf3edadd8f",
            "ab46c7d25d3bb74b",
            "570cc8a3dd014038",
            "7e1e1ed2c52487f5",
            "505ee7d447687c96",
            "8498c6ad0a1a8df7",
            "192043bb5930e80f",
            "f4ccd769fbdd6843",
            "64807321f86b9125",
            "71f67f7f27cafd81"
        ],
        "x": 74,
        "y": 807
    },
    {
        "id": "378995858571b39f",
        "type": "group",
        "z": "55a762ae72fa441b",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "f5a74fe1d67dc764",
            "54b84dae77542449",
            "7156e130265428bd",
            "a802cc1f90bd41ea",
            "108daae7a312a34f",
            "bdb38005806f60c4",
            "916452b345ae29e0",
            "e05f3a75274f8b73",
            "d3c4d73421b078d1",
            "19ec3afca86d1046",
            "7bd8a304b7ed99cb",
            "7690e8c04058fd38",
            "48373ebe740e92b6"
        ],
        "x": 34,
        "y": 499,
        "w": 872,
        "h": 322
    },
    {
        "id": "11a9b9cee18f6b6c",
        "type": "group",
        "z": "f6f035102302ba5a",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "3c85efd6b9fe4796",
            "7503e9afbf970c67",
            "36c9b826c07c4844",
            "b497a4557843716d",
            "223c3fe920a91621",
            "270a5506f8851358",
            "b019d27b1b388b63",
            "74e30c503ee7b8b0",
            "f5ac07449078a00d",
            "3f402ddd8643cce0",
            "a429c99752090afe"
        ],
        "x": 74,
        "y": 1179
    },
    {
        "id": "3a81c46c8f3762a2",
        "type": "group",
        "z": "47c0e0ae667846a9",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "13b29febb8e2b3e9",
            "042587d56aedd796",
            "478145ccd1cc1b6c",
            "1c1fbdd28c2c806b",
            "1b55865e8e16d405"
        ],
        "x": 34,
        "y": 379
    },
    {
        "id": "77bdfe65956919ec",
        "type": "group",
        "z": "175af8efcea2d591",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "25bdc69949d0b152",
            "b3329dfa95503c2c",
            "1a9410ac2442e363",
            "2d07da5341cf14ee",
            "b8f41ef7533e00c1",
            "811f25a4a4480bf7",
            "d775d38173b3593c",
            "8b81919795d67036",
            "3014efb296f50a70",
            "3fbcebb8a982c031"
        ],
        "x": 94,
        "y": 499
    },
    {
        "id": "2971d7c90b74f3b4",
        "type": "group",
        "z": "55a762ae72fa441b",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "9004aeb7ec1ed4bf",
            "692f7e973b247e3f",
            "dc410816705aadf3",
            "4c72ca30adc671fc",
            "627488f25f62e8dc",
            "58af15e1f7b1e202",
            "41fe48a660030e78",
            "b348ea8918f0e0bc",
            "53c404b6960d9d5d",
            "244a5e68750deac1",
            "9c7e5e9066493481",
            "8db898b77b6740df"
        ],
        "x": 154,
        "y": 3819,
        "w": 752,
        "h": 302
    },
    {
        "id": "e6f0aa02159bc664",
        "type": "group",
        "z": "55a762ae72fa441b",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "d236e6eee53270f4",
            "f31e8c8e319d93ce",
            "971728897ecf9437",
            "2badacc9a7cff346",
            "66a6c020170412e9",
            "9b2dd509237ea4ba",
            "75bb4dcf27e09311",
            "c9cff8053a0560cc",
            "cd6470a4dd6dcf5a",
            "a0b22b12a042c73b",
            "d50e20b89aafa29b",
            "4c742ebce9027c25"
        ],
        "x": 154,
        "y": 4299,
        "w": 952,
        "h": 302
    },
    {
        "id": "b16460b067e3329b",
        "type": "group",
        "z": "175af8efcea2d591",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "09e1bb987f6fc783",
            "318fd2d140ad472a",
            "46514258ddd5880b",
            "e9c6866ca0db7662"
        ],
        "x": 894,
        "y": 59
    },
    {
        "id": "738dc520034f11a7",
        "type": "group",
        "z": "175af8efcea2d591",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "2c36544f165ecf61",
            "bb41b3b3cc7b681d",
            "4f56704568189cfc",
            "02424c99509bf97f",
            "af9851791b431668",
            "857fda300015cd6e",
            "d896e715d917cdf2"
        ],
        "x": 94,
        "y": 819
    },
    {
        "id": "cb9c0c3b1fe84ccc",
        "type": "group",
        "z": "d32826a1611e0622",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "b2d4ac6f1946502e",
            "daaf11927f2a4a8b",
            "0290fd63a1e59327",
            "2c989acbcca096b1",
            "4ff11dd0b666fb48",
            "9a1d6ba86b7f753b",
            "95d5bbb03ba2f1fb",
            "ab91ea138a0ca368",
            "f437b1f9f5574bab",
            "4a3e2edb7b10cecb",
            "af0d6f75fe37452a",
            "10f28faa6d606765",
            "dcac314a2015fdf2",
            "48f1b9502311d765"
        ],
        "x": 34,
        "y": 39,
        "w": 412,
        "h": 382
    },
    {
        "id": "a83bb00d46efe804",
        "type": "group",
        "z": "f3ec5d556e86f8d0",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "5bdc6b89364fd15a",
            "9bca7655eb1d89cf",
            "c7fe99b0e0506601",
            "8c0e6a2a0a04fcd7",
            "340a8ade18808c45",
            "cf58eb77138066b2",
            "9dd0a2d0ffb6a743",
            "4215a3196c228639",
            "c58252a4cb097661",
            "579c8c19ccab0937",
            "a74d42b7ae961652",
            "6f32fc52a4d53df8",
            "3dd25f169354ef22",
            "ad34ea44766153db"
        ],
        "x": 134,
        "y": 659
    },
    {
        "id": "e63633ec18181ba7",
        "type": "group",
        "z": "f3ec5d556e86f8d0",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "f4b7c4c243db620d",
            "837b88b53ec5549a",
            "ac6ab4bb77d73dc4",
            "0faf666bf00276e9",
            "2bcc56e6d241c3d9",
            "feddd1768611c551",
            "b111193564f5a7a0",
            "161f3cee4bd60724",
            "b1e8ab6feba986c9",
            "4b72a159e1e82517",
            "c79cb601a8c0ab17"
        ],
        "x": 134,
        "y": 1099
    },
    {
        "id": "bc92f0b2168e67b1",
        "type": "group",
        "z": "f3ec5d556e86f8d0",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "9f34def0af02efeb",
            "80e1d2d095f19693",
            "ac5d35d999fc40b9",
            "cd811a5da6dea1c9"
        ],
        "x": 1174,
        "y": 1079
    },
    {
        "id": "2024311963b7a70e",
        "type": "group",
        "z": "f3ec5d556e86f8d0",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "97e2f252303bfcf3",
            "a1e6f1282aa6e63a",
            "b70ae83c222fa7da"
        ],
        "x": 1174,
        "y": 1299
    },
    {
        "id": "7ceda8dc6f5a8d60",
        "type": "group",
        "z": "f3ec5d556e86f8d0",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "f86871afbc03993e",
            "91b03956f65107e7",
            "7a6d7007d9d5ec67",
            "ccf03d13258bb4e3"
        ],
        "x": 134,
        "y": 1499
    },
    {
        "id": "96cafb8e88dad064",
        "type": "group",
        "z": "f3ec5d556e86f8d0",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "e2b27e9faf37bd1e",
            "6331f7057ebfd37c",
            "bc8a6edecc1a9a5c",
            "c74fb766b19e2bf1"
        ],
        "x": 134,
        "y": 1679
    },
    {
        "id": "96faa29525ade8f0",
        "type": "group",
        "z": "f3ec5d556e86f8d0",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "f8aa15da571b3aae",
            "dfeaa41a75adbf51",
            "f4c6348e4bde4c20",
            "5870cb8ac8846724",
            "4369b98b6d58fe86",
            "99f3e6c97f2c0d2b",
            "02673478ac90323a",
            "1dfa349788a1a948",
            "9e93acca6dde891c",
            "a11c3ee5796d07f2",
            "f03d05829f9254f9",
            "a3534a12592a4f1e",
            "c1f7e764f490f914",
            "4bdef8d87b5da823",
            "b15078312d3e61f5",
            "da8da29f2b800fa5"
        ],
        "x": 134,
        "y": 59
    },
    {
        "id": "2b2a6d295740d392",
        "type": "group",
        "z": "55a762ae72fa441b",
        "g": "6f159bf7a82f4dfa",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "80cdfca71b0a4285",
            "4833618839f23d81",
            "8f38f406c628cd92",
            "71450ef8b8905ee9",
            "75202ca16a123855",
            "3a2d656d9de58a64",
            "7f56ec0176b540bc",
            "3c6b0d2e7d12f47d",
            "a9e9a6448592d3b2",
            "dafcb9eeb25bd05f",
            "97db8049c673a98e",
            "079d1a3ec4dd91d9",
            "2a0d525888f8207a",
            "4c724d58d017c572",
            "92aca6c09c966e83",
            "490c984c330991c7",
            "e3e9fd0d99b1549e",
            "e0d9d7310fe50dd8",
            "8c8fae70037e1c26"
        ],
        "x": 114,
        "y": 1479,
        "w": 1312,
        "h": 442
    },
    {
        "id": "ec7979310fe9e00f",
        "type": "group",
        "z": "55a762ae72fa441b",
        "g": "6f159bf7a82f4dfa",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "b43ba60f45967c77",
            "c9e2c1f189fc8576",
            "e0c6c1515d7fb9ae",
            "6d2a234344182486"
        ],
        "x": 114,
        "y": 1319,
        "w": 712,
        "h": 122
    },
    {
        "id": "28011fcca82837fc",
        "type": "group",
        "z": "55a762ae72fa441b",
        "g": "6f159bf7a82f4dfa",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "e5d8eb5d72932755",
            "e1f84c7be941ca8c",
            "78f0d62baea56673",
            "8d1b28dd96f6b81e",
            "6ee9ecd341bb2e5c",
            "d213416ed624b309"
        ],
        "x": 114,
        "y": 1159,
        "w": 712,
        "h": 142
    },
    {
        "id": "cba36710b3f0e691",
        "type": "group",
        "z": "d32826a1611e0622",
        "style": {
            "stroke": "#3a3a3a",
            "stroke-opacity": "1",
            "fill": "#1e1e1e",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "425525fa50d52aef",
            "c04c6d32184aa86e",
            "b69b44971de6fba0",
            "40bd2073c91617a2"
        ],
        "x": 54,
        "y": 499,
        "w": 712,
        "h": 142
    },
    {
        "id": "b411c6135a7823e0",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#003d5c",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#003d5c",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#003d5c",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#003d5c",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0070a8",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#003d5c",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "050e42e2db96a9f4",
        "type": "ui_tab",
        "name": "Manual Mode",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7c1e7786ce952a5d",
        "type": "ui_group",
        "name": "Lights",
        "tab": "050e42e2db96a9f4",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bc90be16040a7d21",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.112",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3feccb6b5184919b",
        "type": "ui_tab",
        "name": "Match Control",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "062c9dae52b8ca4a",
        "type": "ui_group",
        "name": "----- Pre-Match Setup ----- ",
        "tab": "3feccb6b5184919b",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "eec8a831cc9d15c1",
        "type": "ui_group",
        "name": "----- Queue / Heater ----- ",
        "tab": "3feccb6b5184919b",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f1f13388d5f613e8",
        "type": "ui_group",
        "name": "----- Time to Party ----- ",
        "tab": "3feccb6b5184919b",
        "order": 3,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a9a4d9823a0d3e9f",
        "type": "ui_spacer",
        "z": "55a762ae72fa441b",
        "name": "spacer",
        "group": "eec8a831cc9d15c1",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "020d7845eb6c4a8e",
        "type": "ui_spacer",
        "z": "55a762ae72fa441b",
        "name": "spacer",
        "group": "eec8a831cc9d15c1",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "a9988d07ce7537bf",
        "type": "ui_spacer",
        "z": "55a762ae72fa441b",
        "name": "spacer",
        "group": "eec8a831cc9d15c1",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "20b9c336826478e0",
        "type": "ui_spacer",
        "z": "55a762ae72fa441b",
        "name": "spacer",
        "group": "eec8a831cc9d15c1",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "a908d0a007a04fc4",
        "type": "ui_spacer",
        "z": "55a762ae72fa441b",
        "name": "spacer",
        "group": "eec8a831cc9d15c1",
        "order": 9,
        "width": 3,
        "height": 1
    },
    {
        "id": "eed44365a96c65ec",
        "type": "ui_spacer",
        "z": "55a762ae72fa441b",
        "name": "spacer",
        "group": "eec8a831cc9d15c1",
        "order": 11,
        "width": 3,
        "height": 1
    },
    {
        "id": "b194d4f5bf93f9af",
        "type": "ui_tab",
        "name": "Edge Node Debug",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8ab51318efc44d27",
        "type": "ui_group",
        "name": "HeartBeat Messages",
        "tab": "b194d4f5bf93f9af",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9b0778b1ab30b93e",
        "type": "ui_group",
        "name": "Laser Messages",
        "tab": "b194d4f5bf93f9af",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c98b5bcc37992daf",
        "type": "ui_tab",
        "name": "Game Status",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ee9886ff6322a456",
        "type": "ui_group",
        "name": "Building Status",
        "tab": "c98b5bcc37992daf",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3e7886cb7c605213",
        "type": "ui_group",
        "name": "Manual Testers",
        "tab": "050e42e2db96a9f4",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e2232d1a7ae3ff93",
        "type": "ui_spacer",
        "z": "55a762ae72fa441b",
        "name": "spacer",
        "group": "3e7886cb7c605213",
        "order": 2,
        "width": 5,
        "height": 1
    },
    {
        "id": "c4a10b6193d3e273",
        "type": "ui_spacer",
        "z": "55a762ae72fa441b",
        "name": "spacer",
        "group": "3e7886cb7c605213",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "1e4da6b2e1809214",
        "type": "ui_group",
        "name": "Scoring Summaries",
        "tab": "c98b5bcc37992daf",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7c80b25627d3eb0f",
        "type": "ui_spacer",
        "z": "175af8efcea2d591",
        "name": "spacer",
        "group": "ee9886ff6322a456",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "2843ef5fed650e46",
        "type": "ui_spacer",
        "z": "175af8efcea2d591",
        "name": "spacer",
        "group": "ee9886ff6322a456",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "d2c9f91277bb60e7",
        "type": "ui_spacer",
        "z": "175af8efcea2d591",
        "name": "spacer",
        "group": "1e4da6b2e1809214",
        "order": 2,
        "width": 5,
        "height": 1
    },
    {
        "id": "7a3c32bb77d2c5c3",
        "type": "ui_tab",
        "name": "Trees & Trenches",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e385e97cb63ad34f",
        "type": "ui_group",
        "name": "Trees",
        "tab": "7a3c32bb77d2c5c3",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "13504c5753af441d",
        "type": "ui_group",
        "name": "Tremches",
        "tab": "7a3c32bb77d2c5c3",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5999f1d09afe1039",
        "type": "mqtt-broker",
        "name": "mqtt-node-main",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a5991f3b10b51e7c",
        "type": "ui_group",
        "name": "Default",
        "tab": "8cc3fd17a6d665c5",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "8cc3fd17a6d665c5",
        "type": "ui_tab",
        "name": "Field Config",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6f6f2d0bf9d4b5e3",
        "type": "sqlitedb",
        "db": "/home/pi/sqlite-storage/sqlite",
        "mode": "RWC"
    },
    {
        "id": "e1ba7bc1352dbb74",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "6a070793fb470a03",
        "name": "MVP Step 1 - Light up all Bldgs",
        "info": "",
        "x": 190,
        "y": 120,
        "wires": []
    },
    {
        "id": "93750bbcea38e7fe",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "18778eda46bd5b07",
        "name": "MVP Step 2 - Turn Off a Given Bldg",
        "info": "",
        "x": 220,
        "y": 920,
        "wires": []
    },
    {
        "id": "5725302ea02fb9eb",
        "type": "ui_button",
        "z": "55a762ae72fa441b",
        "g": "6a070793fb470a03",
        "name": "",
        "group": "7c1e7786ce952a5d",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Turn on Bldgs",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "b52637f4da03c425"
            ]
        ]
    },
    {
        "id": "85965edc.72971",
        "type": "ui_template",
        "z": "55a762ae72fa441b",
        "g": "4a4f80625f8ea163",
        "group": "",
        "name": "Dashboard Theme : Modern Dark",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<div>\n    <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@300;500;700&display=swap\" rel=\"stylesheet\">\n    <style>\n        body {\n            --background: #212529;\n            --on-background: white;\n            --surface: #2d3136;\n            --on-surface: white;\n            --primary: var(--nr-dashboard-widgetColor);\n            --on-primary: white;\n            --secondary: var(--nr-dashboard-groupTextColor);\n            --accent: red;\n            --radius-s: 2px;\n            --font-weight-m: 300;\n            --font-weight-m: 500;\n            --font-weight-l: 700;\n            --space-s: 8px;\n            --space-m: 16px;\n            --space-l: 32px;\n        }\n\n        body.nr-dashboard-theme {\n            background-color: var(--background);\n            font-family: 'Montserrat', sans-serif;\n        }\n        .nr-dashboard-theme ui-card-panel {\n            background-color: var(--background);\n            border: 0;\n        }\n        .nr-dashboard-theme .nr-dashboard-button .md-button {\n            background-color: var(--primary);\n            border-radius: var(--radius-s);\n            padding: 8px !important;\n            line-height: inherit;\n            font-weight: var(--font-weight-l);\n            color: var(--on-primary);\n        }\n        .nr-dashboard-theme [ui-card-size=\"2x2\"].nr-dashboard-button .md-button {\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            white-space: pre-line;\n        }\n        \n        .nr-dashboard-theme .nr-dashboard-button .md-button ui-icon {\n                margin-bottom: 8px;\n        }\n        .nr-dashboard-theme .nr-dashboard-button .md-button:hover {\n            background-color: var(--secondary);\n        }\n        body.nr-dashboard-theme md-content md-card {\n            background-color: var(--surface);\n        }\n        md-card.md-default-theme, md-card {\n            border-radius: var(--radius-s);\n        }\n        .nr-dashboard-theme .nr-dashboard-gauge-titlel {\n            font-weight: var(--font-weight-l) !important;      \n        }\n        .nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n            font-weight: var(--font-weight-l);  \n            text-transform: capitalize;\n            color: var(--on-background);\n        }\n        .nr-dashboard-cardpanel > p {\n            margin-left: 0;\n            padding-left: 16px;\n        }\n        body.nr-dashboard-theme md-toolbar {\n            background-color: var(--surface);\n        }\n        .md-default-theme .md-datepicker-calendar, .md-datepicker-calendar,\n        .md-default-theme .md-calendar, .md-calendar{\n            background-color: var(--surface);\n            color: var(--on-surface);\n        }\n        .md-default-theme .md-datepicker-calendar-pane, .md-datepicker-calendar-pane{\n            border: 0;\n        }\n        .md-default-theme .md-calendar-month-label md-icon, .md-calendar-month-label md-icon, .md-default-theme .md-datepicker-input, .md-datepicker-input {\n            color: var(--on-surface);\n        }\n        body.nr-dashboard-theme md-content md-card {\n            color: var(--on-surface);\n        }\n        .nr-dashboard-theme .nr-dashboard-numeric .value {\n            background-color: var(--surface);\n            color: var(--on-surface);\n        }\n        .nr-dashboard-theme .nr-dashboard-dropdown md-select .md-select-value, .nr-dashboard-theme .nr-dashboard-dropdown md-select .md-select-value.md-select-placeholder {\n            color: var(--on-surface);\n            border-color: var(--on-surface);\n        }\n        .nr-dashboard-theme .nr-dashboard-dropdown .md-select-icon {\n            color: var(--on-surface);\n        }\n        .nr-dashboard-theme .nr-dashboard-date-picker md-input-container .md-input {\n            color: var(--on-surface);\n            border-color: var(--on-surface);\n        }\n        .nr-dashboard-theme .nr-dashboard-date-picker .md-datepicker-triangle-button .md-datepicker-expand-triangle {\n            border-top-color: var(--on-surface);\n        }\n        body.nr-dashboard-theme md-sidenav {\n            background-color: var(--surface);\n        }\n        md-list-item._md-button-wrap > div.md-button:first-child, md-list-item .md-list-item-inner {\n            background-color: var(--surface);\n        }\n\n        .bigbutton {\n            font-size: large;\n        }\n    </style>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 1200,
        "y": 120,
        "wires": [
            []
        ],
        "icon": "node-red-dashboard/ui_colour_picker.png",
        "info": "# Modern Dark Theme for node-red-dashboard\n\nInspired by Victor Lucachi with his [Node Red Dashboard Concept](https://dribbble.com/shots/10356530-Node-Red-Dashboard-Concept) on Dribbble. Thank you for your work.\n\n## Customize\n\n1. Go on dashboard customisation tab (At the right of Debug Console).\n2. Select the style `Dark`.\n3. Pick the color you want. Example `#66B5F8`\n\n## Buttons\n\nUse `2x2` size for buttons with icon and text on the screenshot"
    },
    {
        "id": "ff606f8c806a3eac",
        "type": "mqtt out",
        "z": "55a762ae72fa441b",
        "g": "6a070793fb470a03",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 710,
        "y": 240,
        "wires": []
    },
    {
        "id": "28a544304a1e4303",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "6a070793fb470a03",
        "name": "Set Light 0 MQTT Msg",
        "func": "//--- Basic variables\nvar node_id = msg.payload;\n\n//--- Set up MQTT message\nmsg.topic = \"nodered/lighton/\"+node_id;\nmsg.payload = \"{ \\\"whichLight\\\":0 }\";\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 240,
        "wires": [
            [
                "ff606f8c806a3eac"
            ]
        ]
    },
    {
        "id": "b52637f4da03c425",
        "type": "loop",
        "z": "55a762ae72fa441b",
        "g": "6a070793fb470a03",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "[\"RTO\",\"RBO\",\"RTM\",\"RBM\",\"RTI\",\"RBI\",\"LBI\",\"LTI\",\"LBM\",\"LTM\",\"LBO\",\"LTO\"]",
        "enumerationType": "json",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 470,
        "y": 160,
        "wires": [
            [],
            [
                "28a544304a1e4303",
                "95c484054d952cb6",
                "a3b9dda68a07d22c",
                "3697150f5332d13d"
            ]
        ]
    },
    {
        "id": "a3b9dda68a07d22c",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "6a070793fb470a03",
        "name": "Set Gutter MQTT msg",
        "func": "//--- Basic variables\nvar node_id = msg.payload;\n\n//--- Set up MQTT message\nmsg.topic = \"nodered/updatepixels/\"+node_id;\nmsg.payload = \"{ \\\"whichLeds\\\":0, \" +\n    \"\\\"pixels\\\": \\\"222222222222222222222222222222\\\"\" +\n    \"}\";\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 360,
        "wires": [
            [
                "0941e20c1244d3c4",
                "5903df706bf17bf9"
            ]
        ]
    },
    {
        "id": "0941e20c1244d3c4",
        "type": "mqtt out",
        "z": "55a762ae72fa441b",
        "g": "6a070793fb470a03",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 830,
        "y": 360,
        "wires": []
    },
    {
        "id": "442e921eed2365ac",
        "type": "ui_form",
        "z": "55a762ae72fa441b",
        "g": "18778eda46bd5b07",
        "name": "",
        "label": "Turn off Specific Bldg",
        "group": "7c1e7786ce952a5d",
        "order": 3,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Bldg ID",
                "value": "bldg",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "bldg": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 220,
        "y": 980,
        "wires": [
            [
                "aa5c2742d22be7f8"
            ]
        ]
    },
    {
        "id": "aa5c2742d22be7f8",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "18778eda46bd5b07",
        "name": "Set MQTT Messages",
        "func": "/* Example input\nmsg.payload : Object\nobject\n    bldg: \"RT\"\n*/ \n\n//--- Basic variables\nvar node_id = msg.payload.bldg;\nvar msg1 = {};\nvar msg2 = {};\nvar msg3 = {};\n\n//--- Set up MQTT messages\nmsg1.topic = \"nodered/lightoff/\"+node_id;\nmsg1.payload = \"{ \\\"whichLight\\\":1 }\";\nmsg2.topic = \"nodered/updatepixels/\" + node_id;\nmsg2.payload = \"{ \" + \n    \"\\\"whichLeds\\\":0, \" + \n    \"\\\"pixels\\\":\\\"000000000000000000000000000000\\\" \" +\n    \"}\";\nmsg3.topic = \"nodered/lightoff/\" + node_id;\nmsg3.payload = \"{ \\\"whichLight\\\":2 }\";\n\n//--- Fin\nreturn [msg1, msg2, msg3];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 980,
        "wires": [
            [
                "fd128583b8d87f7f"
            ],
            [
                "bdb7dfde4f3191a6"
            ],
            [
                "4eb1999fbc3aab57"
            ]
        ]
    },
    {
        "id": "fd128583b8d87f7f",
        "type": "mqtt out",
        "z": "55a762ae72fa441b",
        "g": "18778eda46bd5b07",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 630,
        "y": 940,
        "wires": []
    },
    {
        "id": "bdb7dfde4f3191a6",
        "type": "mqtt out",
        "z": "55a762ae72fa441b",
        "g": "18778eda46bd5b07",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 630,
        "y": 980,
        "wires": []
    },
    {
        "id": "ee998e797cc6bfa3",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "6f159bf7a82f4dfa",
        "name": "MVP Step 3 - Queue Match Steps",
        "info": "",
        "x": 220,
        "y": 1120,
        "wires": []
    },
    {
        "id": "b43ba60f45967c77",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "ec7979310fe9e00f",
        "name": "Heater",
        "info": "",
        "x": 190,
        "y": 1360,
        "wires": []
    },
    {
        "id": "e5d8eb5d72932755",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "28011fcca82837fc",
        "name": "Pick a Side",
        "info": "",
        "x": 200,
        "y": 1200,
        "wires": []
    },
    {
        "id": "5efe17e007074ad1",
        "type": "inject",
        "z": "55a762ae72fa441b",
        "g": "4a4f80625f8ea163",
        "name": "do",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1130,
        "y": 160,
        "wires": [
            [
                "672af1a8627b7e63"
            ]
        ]
    },
    {
        "id": "672af1a8627b7e63",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "4a4f80625f8ea163",
        "name": "Reset / Default Global Variables",
        "func": "\n//--- Match setup \nglobal.set(\"startSide\",\"\");  // L or R\nglobal.set(\"otherSide\", \"\"); // L or R\nglobal.set(\"startRoute\",\"\"); // T or B\nglobal.set(\"hotBldg\",\"\");    // T or B\nglobal.set(\"curPhase\",0);    // 1, 2, or 3\n\n\n//--- Building objects\nvar bldgs = [\"RTO\", \"RBO\", \"RTM\", \"RBM\", \"RTI\", \"RBI\", \"LBO\", \"LTO\", \"LBM\", \"LTM\", \"LBI\", \"LTI\"];\nfor (var i in bldgs) {\n\n    //Status - Dormant, At Risk(Unblocked), Blocked, Cleared, Damaged\n    global.set(bldgs[i] + \".Status\", \"Dormant\");\n\n    //Fire scores \n    global.set(bldgs[i] + \".FS.Window1-BeforeWater\", 0);\n    global.set(bldgs[i] + \".FS.Window2-BeforeWater\", 0);\n    global.set(bldgs[i] + \".FS.Window1-AfterWater\", 0);\n    global.set(bldgs[i] + \".FS.Window2-AfterWater\", 0);\n    global.set(bldgs[i] + \".Damage\",0);\n\n    // Water qtys - int\n    global.set(bldgs[i] + \".WaterQty\", 0);\n\n    // Gutterpixels - string of numbers that represent colors\n    global.set(bldgs[i] + \".GutterPixels\", \"000000000000000000000000000000\");\n}\n\n\n//Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 160,
        "wires": [
            [
                "da02d40547f5f97a"
            ]
        ]
    },
    {
        "id": "e33ce82b402295fc",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "4a4f80625f8ea163",
        "name": "Configuration",
        "info": "",
        "x": 1070,
        "y": 80,
        "wires": []
    },
    {
        "id": "80cdfca71b0a4285",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "Heater On",
        "info": "",
        "x": 200,
        "y": 1520,
        "wires": []
    },
    {
        "id": "e1f84c7be941ca8c",
        "type": "ui_switch",
        "z": "55a762ae72fa441b",
        "g": "28011fcca82837fc",
        "name": "",
        "label": "Start Side",
        "tooltip": "",
        "group": "062c9dae52b8ca4a",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 240,
        "y": 1240,
        "wires": [
            [
                "6ee9ecd341bb2e5c"
            ]
        ]
    },
    {
        "id": "78f0d62baea56673",
        "type": "ui_text",
        "z": "55a762ae72fa441b",
        "g": "28011fcca82837fc",
        "group": "062c9dae52b8ca4a",
        "order": 2,
        "width": 5,
        "height": 1,
        "name": "Startside Output",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 720,
        "y": 1240,
        "wires": []
    },
    {
        "id": "8d1b28dd96f6b81e",
        "type": "change",
        "z": "55a762ae72fa441b",
        "g": "28011fcca82837fc",
        "name": "Right",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "RIGHT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "startSide",
                "pt": "global",
                "to": "R",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "otherSide",
                "pt": "global",
                "to": "L",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1220,
        "wires": [
            [
                "78f0d62baea56673"
            ]
        ]
    },
    {
        "id": "6ee9ecd341bb2e5c",
        "type": "switch",
        "z": "55a762ae72fa441b",
        "g": "28011fcca82837fc",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 1240,
        "wires": [
            [
                "8d1b28dd96f6b81e"
            ],
            [
                "d213416ed624b309"
            ]
        ]
    },
    {
        "id": "d213416ed624b309",
        "type": "change",
        "z": "55a762ae72fa441b",
        "g": "28011fcca82837fc",
        "name": "Left",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "LEFT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "startSide",
                "pt": "global",
                "to": "L",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "otherSide",
                "pt": "global",
                "to": "R",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1260,
        "wires": [
            [
                "78f0d62baea56673"
            ]
        ]
    },
    {
        "id": "c9e2c1f189fc8576",
        "type": "ui_button",
        "z": "55a762ae72fa441b",
        "g": "ec7979310fe9e00f",
        "name": "",
        "group": "062c9dae52b8ca4a",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Randomize Hotspot Bldg",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 290,
        "y": 1400,
        "wires": [
            [
                "e0c6c1515d7fb9ae"
            ]
        ]
    },
    {
        "id": "e0c6c1515d7fb9ae",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "ec7979310fe9e00f",
        "name": "Random choice",
        "func": "//Use the timestamp to random select lol\nvar input = String(msg.payload);\nvar lastDigit = parseInt(input.slice(-1));\n\n//Evens top, odds bottom\nvar hotRoute = (lastDigit % 2) == 0 ? \"T\" : \"B\"; \nvar theHotBldg = global.get(\"startSide\") + hotRoute + \"O\"; //always O bldg\n\n//Fin\nglobal.set(\"hotBldg\", theHotBldg);\nglobal.set(theHotBldg + \".Status\", \"Hottt\");\nmsg.payload = theHotBldg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1400,
        "wires": [
            [
                "6d2a234344182486"
            ]
        ]
    },
    {
        "id": "6d2a234344182486",
        "type": "ui_text",
        "z": "55a762ae72fa441b",
        "g": "ec7979310fe9e00f",
        "group": "062c9dae52b8ca4a",
        "order": 4,
        "width": 5,
        "height": 1,
        "name": "Hotbldg Output",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 720,
        "y": 1400,
        "wires": []
    },
    {
        "id": "5bf648170501ee01",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "6f159bf7a82f4dfa",
        "name": "Note - these all also update globals",
        "info": "",
        "x": 540,
        "y": 1120,
        "wires": []
    },
    {
        "id": "4833618839f23d81",
        "type": "ui_button",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "",
        "group": "eec8a831cc9d15c1",
        "order": 2,
        "width": 8,
        "height": 2,
        "passthru": false,
        "label": "CONFIRM - Queue Match - Turn on Heater",
        "tooltip": "",
        "color": "",
        "bgcolor": "darkorange",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 350,
        "y": 1600,
        "wires": [
            [
                "8f38f406c628cd92",
                "7f56ec0176b540bc",
                "490c984c330991c7"
            ]
        ]
    },
    {
        "id": "8f38f406c628cd92",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "Build MQTT to heat it up",
        "func": "//Get the thing\nvar whichBldg = global.get(\"hotBldg\");\n\n//Build the MQTT message\nmsg.topic = \"nodered/heateron/\" + whichBldg;\nmsg.payload = \"{}\";\n\n//Fin\nglobal.set(\"hotBldg\",whichBldg);\nmsg.payload = global.get(\"startSide\") + whichBldg + \"O\"; //always O bldg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1560,
        "wires": [
            [
                "71450ef8b8905ee9"
            ]
        ]
    },
    {
        "id": "71450ef8b8905ee9",
        "type": "mqtt out",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 870,
        "y": 1560,
        "wires": []
    },
    {
        "id": "75202ca16a123855",
        "type": "ui_text",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "group": "eec8a831cc9d15c1",
        "order": 6,
        "width": 10,
        "height": 1,
        "name": "",
        "label": "Heater has been on for: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1290,
        "y": 1640,
        "wires": []
    },
    {
        "id": "3a2d656d9de58a64",
        "type": "delay",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 960,
        "y": 1740,
        "wires": [
            [
                "dafcb9eeb25bd05f"
            ]
        ]
    },
    {
        "id": "7f56ec0176b540bc",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "Do a timer",
        "func": "let clock_value = flow.get(\"clock_value\") || 0;\n\nclock_value++; \n\nif (clock_value < 0) clock_value = 0;\n\nflow.set(\"clock_value\", clock_value);\nglobal.set(\"heaterTime\", clock_value);\n\nmsg.payload = clock_value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1680,
        "wires": [
            [
                "a9e9a6448592d3b2",
                "3c6b0d2e7d12f47d",
                "3a2d656d9de58a64"
            ]
        ]
    },
    {
        "id": "3c6b0d2e7d12f47d",
        "type": "ui_gauge",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "",
        "group": "eec8a831cc9d15c1",
        "order": 8,
        "width": 7,
        "height": 4,
        "gtype": "gage",
        "title": "Heating Up Time",
        "label": "seconds",
        "format": "{{value}}",
        "min": 0,
        "max": "180",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "120",
        "className": "",
        "x": 1010,
        "y": 1680,
        "wires": []
    },
    {
        "id": "a9e9a6448592d3b2",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "seconds to minute:seconds",
        "func": "//https://flows.nodered.org/flow/07570367cf2ccf79344c5f336004d9d9\n\nlet secsDecimal = msg.payload;\n\nlet mins = Math.floor(secsDecimal/60);\nlet secs = secsDecimal % 60;\n\n//msg.payload = (mins + (secs / 100.0)).toFixed(2)\nmsg.payload = secs < 10 ? (mins + \":0\" + secs) : (mins + \":\" + secs);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1640,
        "wires": [
            [
                "75202ca16a123855"
            ]
        ]
    },
    {
        "id": "dafcb9eeb25bd05f",
        "type": "switch",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "If still on",
        "property": "heateron",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1120,
        "y": 1740,
        "wires": [
            [
                "7f56ec0176b540bc"
            ]
        ]
    },
    {
        "id": "97db8049c673a98e",
        "type": "ui_button",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "",
        "group": "eec8a831cc9d15c1",
        "order": 10,
        "width": 3,
        "height": 2,
        "passthru": true,
        "label": "KILL THE HEATER",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 310,
        "y": 1840,
        "wires": [
            [
                "079d1a3ec4dd91d9",
                "2a0d525888f8207a",
                "92aca6c09c966e83"
            ]
        ]
    },
    {
        "id": "079d1a3ec4dd91d9",
        "type": "change",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "global.heateron = false",
        "rules": [
            {
                "t": "set",
                "p": "heateron",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "2a0d525888f8207a",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "Build MQTT to shut 'er down",
        "func": "//Get the thing\nvar whichBldg = global.get(\"startSide\") + global.get(\"hotBldg\") + \"O\";\n\n//Build the MQTT message\nmsg.topic = \"nodered/heateroff/\" + whichBldg;\nmsg.payload = \"{}\";\n\n//Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1800,
        "wires": [
            [
                "4c724d58d017c572"
            ]
        ]
    },
    {
        "id": "4c724d58d017c572",
        "type": "mqtt out",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 770,
        "y": 1800,
        "wires": []
    },
    {
        "id": "92aca6c09c966e83",
        "type": "change",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "Reset timer",
        "rules": [
            {
                "t": "set",
                "p": "clock_value",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 1880,
        "wires": [
            [
                "7f56ec0176b540bc",
                "e3e9fd0d99b1549e"
            ]
        ]
    },
    {
        "id": "490c984c330991c7",
        "type": "change",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "global.heateron = true",
        "rules": [
            {
                "t": "set",
                "p": "heateron",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "e3e9fd0d99b1549e",
        "type": "delay",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 850,
        "y": 1880,
        "wires": [
            [
                "e0d9d7310fe50dd8"
            ]
        ]
    },
    {
        "id": "e0d9d7310fe50dd8",
        "type": "change",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "OFF",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 1880,
        "wires": [
            [
                "75202ca16a123855"
            ]
        ]
    },
    {
        "id": "fd280fb139a56e3e",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "MVP Step 4 - Match Start (T=0)",
        "info": "",
        "x": 210,
        "y": 2020,
        "wires": []
    },
    {
        "id": "9321df77664c4496",
        "type": "ui_button",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "",
        "group": "f1f13388d5f613e8",
        "order": 1,
        "width": 5,
        "height": 2,
        "passthru": false,
        "label": "START MATCH",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "bigbutton",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 240,
        "y": 2220,
        "wires": [
            [
                "82a8466517112ffd",
                "ee7fad842ebd85de",
                "18a7e5b4e99c326d",
                "4b6a57a81a1ea4ce",
                "e4346dc3857e09be"
            ]
        ]
    },
    {
        "id": "82a8466517112ffd",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Update first Burning Bldgs",
        "func": "//--- Set up vars\nif (global.get(\"curPhase\") == 1) {\n    var whichSide = global.get(\"startSide\");   // \"L\" or \"R\"\n} else if (global.get(\"curPhase\") == 2) {\n    var whichSide = global.get(\"otherSide\");\n}\nvar msg1 = {};\nmsg1.payload = {};\nvar msg2 = {};\nmsg2.payload = {};\n\n//--- Top or bottom?\nvar whichRouteInt = Math.floor(Math.random() * 2); //returns 0 or 1\nvar whichRouteStr = whichRouteInt == 1 ? \"T\" : \"B\";\nglobal.set(\"startRoute\", whichRouteStr);\nvar bldg1 = whichSide + whichRouteStr + \"M\"; //e.g. bldg LTM\nvar bldg2 = whichSide + whichRouteStr + \"I\"; //e.g. bldg LTI\n\n//--- Set up payloads to update globals using callbacks\n// - Callback expects payload.bldg, payload.window, payload.numFire\n// - Set window 1 to FS of 8\nmsg1.payload.bldg = bldg1;\nmsg1.payload.window = 1;\nmsg1.payload.numFire = 8;\nmsg2.payload.bldg = bldg2;\nmsg2.payload.window = 1;\nmsg2.payload.numFire = 8;\n\n//Fin\nreturn [msg1, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2100,
        "wires": [
            [
                "c612b81a64bb9759",
                "45e70a9ad7899e4d"
            ],
            [
                "c612b81a64bb9759",
                "9cbdb9d52fe7cf9a"
            ]
        ]
    },
    {
        "id": "c612b81a64bb9759",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Send T=0 FS updates",
        "mode": "link",
        "links": [
            "0416ea6909311b42",
            "772defe5dc3f1eb0",
            "113bf2ef4799a486"
        ],
        "x": 805,
        "y": 2100,
        "wires": []
    },
    {
        "id": "ee7fad842ebd85de",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Light up a Tello Path",
        "func": "/* \nGutterPixels callback expects\npayload.bldg, payload.pixelstring\n*/ \n\n\n//--- Set up vars\nvar whichSide = global.get(\"otherSide\"); // \"L\" or \"R\"\nvar msg1 = {};\nmsg1.payload = {};\nvar msg2 = {};\nmsg2.payload = {};\nvar msg3 = {};\nmsg3.payload = {};\nvar msg4 = {};\nmsg4.payload = {};\n\n//                    |                            |\nvar thePixelString = \"666666666666666666666666666666\"; // TEAL\n\n//--- Set up messages\nmsg1.payload.bldg = whichSide + \"TO\";\nmsg2.payload.bldg = whichSide + \"TM\";\nmsg3.payload.bldg = whichSide + \"BM\";\nmsg4.payload.bldg = whichSide + \"BI\";\nmsg1.payload.pixelstring = thePixelString;\nmsg2.payload.pixelstring = thePixelString;\nmsg3.payload.pixelstring = thePixelString;\nmsg4.payload.pixelstring = thePixelString;\n\n//--- Update global statuses\nglobal.set(msg1.payload.bldg + \".Status\", \"TelloPath\");\nglobal.set(msg2.payload.bldg + \".Status\", \"TelloPath\");\nglobal.set(msg3.payload.bldg + \".Status\", \"TelloPath\");\nglobal.set(msg4.payload.bldg + \".Status\", \"TelloPath\");\n\n//Fin\nreturn [msg1, msg2, msg3, msg4];\n\n\n/*\n--------\nTHIS WILL BE EASY TO ADD ALL 3 PATHS LATER \n- JUST PULL FROM THE OTHER CODE\n--------\n*/ ",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2220,
        "wires": [
            [
                "ae0759e01e0881af"
            ],
            [
                "ae0759e01e0881af"
            ],
            [
                "ae0759e01e0881af"
            ],
            [
                "ae0759e01e0881af"
            ]
        ]
    },
    {
        "id": "ae0759e01e0881af",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Tello GutterPixels",
        "mode": "link",
        "links": [
            "f8afe1542a91baa2"
        ],
        "x": 725,
        "y": 2220,
        "wires": []
    },
    {
        "id": "18a7e5b4e99c326d",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Set 1:00 target for heater",
        "func": "//--- Set up vars\nvar hotBldg = global.get(\"hotBldg\"); // e.g. \"LTO\"\nvar curHotTime = global.get(\"heaterTime\"); //in secs\n\n//--- Set a \"time target\" that is 60 secs from now\nvar timeTarget = curHotTime + 5;\nglobal.set(\"heaterTimeTarget\", timeTarget);\n//node.warn(global.get(\"heaterTime\"));\n//node.warn(global.get(\"heaterTimeTarget\"));\n\n\n//Fin\nmsg.payload = timeTarget;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2320,
        "wires": [
            [
                "140ccabed0093842"
            ]
        ]
    },
    {
        "id": "8c8fae70037e1c26",
        "type": "link in",
        "z": "55a762ae72fa441b",
        "g": "2b2a6d295740d392",
        "name": "Kill the Heater",
        "links": [
            "157a25e39689ce6c",
            "d1995509f950a1a9",
            "6d217ae324a7acc7"
        ],
        "x": 185,
        "y": 1840,
        "wires": [
            [
                "97db8049c673a98e"
            ]
        ]
    },
    {
        "id": "aadcf8e2c074df27",
        "type": "ui_text",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "group": "eec8a831cc9d15c1",
        "order": 7,
        "width": 10,
        "height": 1,
        "name": "",
        "label": "Heater will turn off in: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1460,
        "y": 2280,
        "wires": []
    },
    {
        "id": "f006f834cd4dc2be",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "MVP Step 5 - Global Timer, progress through bldgs",
        "info": "",
        "x": 270,
        "y": 2620,
        "wires": []
    },
    {
        "id": "550ba5d34605ad4c",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "Overarching FS concept in this comment vvvvv",
        "info": "- FS progresses along at a fixed path\n- FS communication is \"one-way\", so to speak\n- Teams can ping it down as it grows\n- If you get to it before it progresses to second window, \n  you get damage prevention bonus",
        "x": 720,
        "y": 2620,
        "wires": []
    },
    {
        "id": "11b308030fbc13bf",
        "type": "delay",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 2720,
        "wires": [
            [
                "77191df86e82050c"
            ]
        ]
    },
    {
        "id": "77191df86e82050c",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "First Burning Bldgs -> 2 Windows",
        "func": "//--- Set up vars\nif (global.get(\"curPhase\") == 1) {\n    var whichSide = global.get(\"startSide\");   // \"L\" or \"R\"\n} else if(global.get(\"curPhase\") == 2) { \n    var whichSide = global.get(\"otherSide\"); \n}\nvar whichRoute = global.get(\"startRoute\"); // \"T\" or \"B\"\nvar bldg1 = whichSide + whichRoute + \"I\";  // e.g. \"LTI\"\nvar bldg2 = whichSide + whichRoute + \"M\";  // e.g. \"LTM\"\nvar msg1 = {};\nmsg1.payload = {};\nvar msg2 = {};\nmsg2.payload = {};\n\n//--- Check on the bldgs\n// Anyone who is still burning (i.e. team has not turned FS to 0) expands to next window\n// Set up payloads to update globals using callbacks\n// - Callback expects payload.bldg, payload.window, payload.numFire\n// - Set window 2 to FS of 8\nif (global.get(bldg1 + \".FS.Window1-AfterWater\") > 0) {\n    msg1.payload.bldg = bldg1;\n    msg1.payload.window = 2;\n    msg1.payload.numFire = 8;\n}\nif (global.get(bldg2 + \".FS.Window1-AfterWater\") > 0) {\n    msg2.payload.bldg = bldg2;\n    msg2.payload.window = 2;\n    msg2.payload.numFire = 8;\n}\n\n//Fin\nreturn [msg1, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 2780,
        "wires": [
            [
                "d0e47829bbab10d2",
                "d8060f8e62e726ce"
            ],
            [
                "d0e47829bbab10d2",
                "f6d8fde6109ac979"
            ]
        ]
    },
    {
        "id": "140ccabed0093842",
        "type": "trigger",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 800,
        "y": 2320,
        "wires": [
            [
                "a7ed1ac2a675515d"
            ]
        ]
    },
    {
        "id": "a7ed1ac2a675515d",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Time Remaining",
        "func": "var waitTime = global.get(\"heaterTimeTarget\") - global.get(\"heaterTime\");\nmsg.payload = waitTime;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2320,
        "wires": [
            [
                "3b77325dbc1afa0c"
            ]
        ]
    },
    {
        "id": "3b77325dbc1afa0c",
        "type": "switch",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "If still time remaining",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1200,
        "y": 2320,
        "wires": [
            [
                "aadcf8e2c074df27"
            ],
            [
                "f80fcf16add6a94c",
                "6e9c04bbdc0780af"
            ]
        ]
    },
    {
        "id": "f80fcf16add6a94c",
        "type": "change",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 2380,
        "wires": [
            [
                "140ccabed0093842",
                "d1995509f950a1a9"
            ]
        ]
    },
    {
        "id": "d1995509f950a1a9",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Ding fries are done",
        "mode": "link",
        "links": [
            "8c8fae70037e1c26"
        ],
        "x": 1575,
        "y": 2380,
        "wires": []
    },
    {
        "id": "da8215e65b543ef9",
        "type": "ui_button",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "",
        "group": "f1f13388d5f613e8",
        "order": 2,
        "width": 5,
        "height": 2,
        "passthru": true,
        "label": "END / RESET MATCH",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 280,
        "y": 2460,
        "wires": [
            [
                "2335df53b4766297",
                "6d217ae324a7acc7",
                "9bc5be050fadf6b6"
            ]
        ]
    },
    {
        "id": "c46aa67248fd589a",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "Will change to 60s or something - timing pending",
        "info": "- FS progresses along at a fixed path\n- FS communication is \"one-way\", so to speak\n- Teams can ping it down as it grows\n- If you get to it before it progresses to second window, \n  you get damage prevention bonus",
        "x": 380,
        "y": 2680,
        "wires": []
    },
    {
        "id": "d0e47829bbab10d2",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "Send \"first burn\" FS updates",
        "mode": "link",
        "links": [
            "0416ea6909311b42",
            "772defe5dc3f1eb0",
            "113bf2ef4799a486"
        ],
        "x": 705,
        "y": 2780,
        "wires": []
    },
    {
        "id": "4b6a57a81a1ea4ce",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Start Burn Timer",
        "mode": "link",
        "links": [
            "ff0af9f0a11f5393"
        ],
        "x": 415,
        "y": 2400,
        "wires": []
    },
    {
        "id": "ea98a939f9a52953",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Start burn timer",
        "info": "",
        "x": 520,
        "y": 2380,
        "wires": []
    },
    {
        "id": "ff0af9f0a11f5393",
        "type": "link in",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "Start tha burn",
        "links": [
            "4b6a57a81a1ea4ce"
        ],
        "x": 145,
        "y": 2720,
        "wires": [
            [
                "11b308030fbc13bf"
            ]
        ]
    },
    {
        "id": "f6d8fde6109ac979",
        "type": "delay",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 2840,
        "wires": [
            [
                "6177f53a1a1c40ea"
            ]
        ]
    },
    {
        "id": "6177f53a1a1c40ea",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "Second Bldgs -> 1 Window",
        "func": "//--- Set up vars\nif (global.get(\"curPhase\") == 1) {\n    var whichSide = global.get(\"startSide\");   // \"L\" or \"R\"\n} else if (global.get(\"curPhase\") == 2) {\n    var whichSide = global.get(\"otherSide\");\n}\nvar startRoute = global.get(\"startRoute\"); // \"T\" or \"B\"\nvar whichRoute = startRoute == \"T\" ? \"B\" : \"T\"; //opposite\nvar bldg1 = whichSide + whichRoute + \"I\";  // e.g. \"LTI\"\nvar bldg2 = whichSide + whichRoute + \"M\";  // e.g. \"LTM\"\nvar msg1 = {};\nmsg1.payload = {};\nvar msg2 = {};\nmsg2.payload = {};\n\n//--- Set up payloads to update globals using callbacks\n// - Callback expects payload.bldg, payload.window, payload.numFire\n// - Set window 1 to FS of 8\nmsg1.payload.bldg = bldg1;\nmsg1.payload.window = 1;\nmsg1.payload.numFire = 8;\nmsg2.payload.bldg = bldg2;\nmsg2.payload.window = 1;\nmsg2.payload.numFire = 8;\n\n//Fin\nreturn [msg1, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2840,
        "wires": [
            [
                "6f5b0006051e39ef"
            ],
            [
                "6f5b0006051e39ef",
                "5addcc4a4e5261bd"
            ]
        ]
    },
    {
        "id": "6f5b0006051e39ef",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "Send \"first burn\" FS updates",
        "mode": "link",
        "links": [
            "0416ea6909311b42",
            "772defe5dc3f1eb0",
            "113bf2ef4799a486"
        ],
        "x": 705,
        "y": 2840,
        "wires": []
    },
    {
        "id": "5addcc4a4e5261bd",
        "type": "delay",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 2900,
        "wires": [
            [
                "67dbb7b83e823038"
            ]
        ]
    },
    {
        "id": "67dbb7b83e823038",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "Second Bldgs -> 2 Windows",
        "func": "//--- Set up vars\nif (global.get(\"curPhase\") == 1) {\n    var whichSide = global.get(\"startSide\");   // \"L\" or \"R\"\n} else if (global.get(\"curPhase\") == 2) {\n    var whichSide = global.get(\"otherSide\");\n}\nvar startRoute = global.get(\"startRoute\"); // \"T\" or \"B\"\nvar whichRoute = startRoute == \"T\" ? \"B\" : \"T\"; //opposite\nvar bldg1 = whichSide + whichRoute + \"I\";  // e.g. \"LTI\"\nvar bldg2 = whichSide + whichRoute + \"M\";  // e.g. \"LTM\"\nvar msg1 = {};\nvar msg2 = {};\nmsg1.payload = {};\nmsg2.payload = {};\n\n\n//--- Check on the bldgs\n// Anyone who is still burning (i.e. team has not turned FS to 0) expands to next window\n// Set up payloads to update globals using callbacks\n// - Callback expects payload.bldg, payload.window, payload.numFire\n// - Set window 2 to FS of 8\nif (global.get(bldg1 + \".FS.Window1-AfterWater\") > 0) {\n    msg1.payload.bldg = bldg1;\n    msg1.payload.window = 2;\n    msg1.payload.numFire = 8;\n}\nif (global.get(bldg2 + \".FS.Window1-AfterWater\") > 0) {\n    msg2.payload.bldg = bldg2;\n    msg2.payload.window = 2;\n    msg2.payload.numFire = 8;\n}\n\n\n//Fin\nreturn [msg1, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2900,
        "wires": [
            [
                "41518b531082b3d7"
            ],
            [
                "41518b531082b3d7"
            ]
        ]
    },
    {
        "id": "41518b531082b3d7",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "Send \"first burn\" FS updates",
        "mode": "link",
        "links": [
            "0416ea6909311b42",
            "772defe5dc3f1eb0",
            "113bf2ef4799a486"
        ],
        "x": 705,
        "y": 2900,
        "wires": []
    },
    {
        "id": "227f2d5a2ea24037",
        "type": "link in",
        "z": "55a762ae72fa441b",
        "g": "4a4f80625f8ea163",
        "name": "RESET",
        "links": [
            "2335df53b4766297"
        ],
        "x": 1155,
        "y": 220,
        "wires": [
            [
                "672af1a8627b7e63"
            ]
        ]
    },
    {
        "id": "2335df53b4766297",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "JUST END IT",
        "mode": "link",
        "links": [
            "227f2d5a2ea24037"
        ],
        "x": 445,
        "y": 2440,
        "wires": []
    },
    {
        "id": "6d217ae324a7acc7",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Ding fries are done",
        "mode": "link",
        "links": [
            "8c8fae70037e1c26"
        ],
        "x": 445,
        "y": 2480,
        "wires": []
    },
    {
        "id": "b139a3ab9696d743",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Send all the resets",
        "info": "",
        "x": 580,
        "y": 2460,
        "wires": []
    },
    {
        "id": "0ff21611a0176572",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "TODO - Reset GUI",
        "info": "",
        "x": 580,
        "y": 2500,
        "wires": []
    },
    {
        "id": "d56b2c69ab7a5b19",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "MVP Step 6 - Receive a laser / ball hit, decrease FS",
        "info": "",
        "x": 270,
        "y": 3100,
        "wires": []
    },
    {
        "id": "094553d279219043",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "name": "MVP Step 7 - Spread Path Lighting Controls",
        "info": "",
        "x": 210,
        "y": 3640,
        "wires": []
    },
    {
        "id": "90051ad270b2f765",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "name": "MVP Step 8 - Phase 2",
        "info": "",
        "x": 200,
        "y": 3780,
        "wires": []
    },
    {
        "id": "28af28cc8618a072",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "name": "[not-so-]MVP Step 9 - Endgame",
        "info": "",
        "x": 230,
        "y": 4260,
        "wires": []
    },
    {
        "id": "c71621e5f8d62525",
        "type": "mqtt in",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "",
        "topic": "edgenode/laserhit/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bc90be16040a7d21",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 3400,
        "wires": [
            [
                "a43cfe8c60aa1766",
                "6cbc63bf1ddca5ee"
            ]
        ]
    },
    {
        "id": "3324776758a34ef8",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "Convert to callback formats - BALL",
        "func": "/* \nExample input BALL:\nobject\nnum_drops: 1\ntimestamp: 637739\nBUILDING_NAME: \"LBM\"\nside_id: 1\n\nDesired outputs for callback: \npayload.bldg, payload.newAddlWaterQty\n*/ \n\n//--- Basic variables \nvar input = msg.payload;\nvar nodeid = input.BUILDING_NAME; \nvar numHits = input.num_drops;  \nmsg.payload = {};\nnode.warn\n\n\n//--- FS update callback outputs\nmsg.payload.bldg = nodeid;\nmsg.payload.newAddlWaterQty = numHits;\n\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 3220,
        "wires": [
            [
                "3ddb4866a6ecb8fe"
            ]
        ]
    },
    {
        "id": "14d53b51ae10a6d7",
        "type": "inject",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "Fake laser MQTT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "edgenode/laserhit/RTO",
        "payload": "{\"node_id\":\"RTO\",\"num_hits\":1,\"timestamp\":1234567890}",
        "payloadType": "json",
        "x": 280,
        "y": 3480,
        "wires": [
            [
                "b92ea91a45968087"
            ]
        ],
        "info": "Example input: \r\n{\r\n    \"node_id\":\"LTO\",\r\n    \"num_hits\":5, \r\n    \"timestamp\":1234567890\r\n}"
    },
    {
        "id": "691a5afc5b52b78a",
        "type": "link in",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Just end it (in)",
        "links": [
            "0e3ebf9316c50718"
        ],
        "x": 125,
        "y": 2440,
        "wires": [
            [
                "da8215e65b543ef9"
            ]
        ]
    },
    {
        "id": "da290e77a88988a7",
        "type": "link in",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "Laser Hit Inject",
        "links": [
            "8b81919795d67036"
        ],
        "x": 345,
        "y": 3280,
        "wires": [
            [
                "3324776758a34ef8"
            ]
        ]
    },
    {
        "id": "3ddb4866a6ecb8fe",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "Laser been hit",
        "mode": "link",
        "links": [
            "ab46c7d25d3bb74b"
        ],
        "x": 955,
        "y": 3300,
        "wires": []
    },
    {
        "id": "250504d69a42ec07",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "To callback",
        "info": "",
        "x": 960,
        "y": 3260,
        "wires": []
    },
    {
        "id": "a43cfe8c60aa1766",
        "type": "debug",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "db received laser hit",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 3360,
        "wires": []
    },
    {
        "id": "95c484054d952cb6",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "6a070793fb470a03",
        "name": "Set Light 1 MQTT Msg",
        "func": "//--- Basic variables\nvar node_id = msg.payload;\n\n//--- Set up MQTT message\nmsg.topic = \"nodered/lighton/\"+node_id;\nmsg.payload = \"{ \\\"whichLight\\\": 1 }\";\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 280,
        "wires": [
            [
                "17966a2f1dd06930"
            ]
        ]
    },
    {
        "id": "17966a2f1dd06930",
        "type": "mqtt out",
        "z": "55a762ae72fa441b",
        "g": "6a070793fb470a03",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 750,
        "y": 280,
        "wires": []
    },
    {
        "id": "3697150f5332d13d",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "6a070793fb470a03",
        "name": "Set Light 2 MQTT Msg",
        "func": "//--- Basic variables\nvar node_id = msg.payload;\n\n//--- Set up MQTT message\nmsg.topic = \"nodered/lighton/\"+node_id;\nmsg.payload = \"{ \\\"whichLight\\\": 2 }\";\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 320,
        "wires": [
            [
                "822ce164ff689dfc"
            ]
        ]
    },
    {
        "id": "822ce164ff689dfc",
        "type": "mqtt out",
        "z": "55a762ae72fa441b",
        "g": "6a070793fb470a03",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 790,
        "y": 320,
        "wires": []
    },
    {
        "id": "f5a74fe1d67dc764",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "378995858571b39f",
        "name": "MVP Step 1 - Light Off all Bldgs",
        "info": "",
        "x": 190,
        "y": 540,
        "wires": []
    },
    {
        "id": "54b84dae77542449",
        "type": "ui_button",
        "z": "55a762ae72fa441b",
        "g": "378995858571b39f",
        "name": "",
        "group": "7c1e7786ce952a5d",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Turn off Bldgs",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 240,
        "y": 580,
        "wires": [
            [
                "108daae7a312a34f"
            ]
        ]
    },
    {
        "id": "7156e130265428bd",
        "type": "mqtt out",
        "z": "55a762ae72fa441b",
        "g": "378995858571b39f",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 710,
        "y": 660,
        "wires": []
    },
    {
        "id": "a802cc1f90bd41ea",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "378995858571b39f",
        "name": "Set Light 0 MQTT Msg",
        "func": "//--- Basic variables\nvar node_id = msg.payload;\n\n//--- Set up MQTT message\nmsg.topic = \"nodered/lightoff/\"+node_id;\nmsg.payload = \"{ \\\"whichLight\\\":0 }\";\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 660,
        "wires": [
            [
                "7156e130265428bd"
            ]
        ]
    },
    {
        "id": "108daae7a312a34f",
        "type": "loop",
        "z": "55a762ae72fa441b",
        "g": "378995858571b39f",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "[\"RTO\",\"RBO\",\"RTM\",\"RBM\",\"RTI\",\"RBI\",\"LBI\",\"LTI\",\"LBM\",\"LTM\",\"LBO\",\"LTO\"]",
        "enumerationType": "json",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 470,
        "y": 580,
        "wires": [
            [],
            [
                "a802cc1f90bd41ea",
                "e05f3a75274f8b73",
                "bdb38005806f60c4",
                "19ec3afca86d1046"
            ]
        ]
    },
    {
        "id": "bdb38005806f60c4",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "378995858571b39f",
        "name": "Set Gutter MQTT msg",
        "func": "//--- Basic variables\nvar node_id = msg.payload;\n\n//--- Set up MQTT message\nmsg.topic = \"nodered/updatepixels/\"+node_id;\nmsg.payload = \"{ \\\"whichLeds\\\":0, \" +\n    \"\\\"pixels\\\": \\\"000000000000000000000000000000\\\"\" +\n    \"}\";\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 780,
        "wires": [
            [
                "916452b345ae29e0",
                "7690e8c04058fd38"
            ]
        ]
    },
    {
        "id": "916452b345ae29e0",
        "type": "mqtt out",
        "z": "55a762ae72fa441b",
        "g": "378995858571b39f",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 830,
        "y": 780,
        "wires": []
    },
    {
        "id": "e05f3a75274f8b73",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "378995858571b39f",
        "name": "Set Light 1 MQTT Msg",
        "func": "//--- Basic variables\nvar node_id = msg.payload;\n\n//--- Set up MQTT message\nmsg.topic = \"nodered/lightoff/\"+node_id;\nmsg.payload = \"{ \\\"whichLight\\\": 1 }\";\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 700,
        "wires": [
            [
                "d3c4d73421b078d1"
            ]
        ]
    },
    {
        "id": "d3c4d73421b078d1",
        "type": "mqtt out",
        "z": "55a762ae72fa441b",
        "g": "378995858571b39f",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 750,
        "y": 700,
        "wires": []
    },
    {
        "id": "19ec3afca86d1046",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "378995858571b39f",
        "name": "Set Light 2 MQTT Msg",
        "func": "//--- Basic variables\nvar node_id = msg.payload;\n\n//--- Set up MQTT message\nmsg.topic = \"nodered/lightoff/\"+node_id;\nmsg.payload = \"{ \\\"whichLight\\\": 2 }\";\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 740,
        "wires": [
            [
                "7bd8a304b7ed99cb"
            ]
        ]
    },
    {
        "id": "7bd8a304b7ed99cb",
        "type": "mqtt out",
        "z": "55a762ae72fa441b",
        "g": "378995858571b39f",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 790,
        "y": 740,
        "wires": []
    },
    {
        "id": "4eb1999fbc3aab57",
        "type": "mqtt out",
        "z": "55a762ae72fa441b",
        "g": "18778eda46bd5b07",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 630,
        "y": 1020,
        "wires": []
    },
    {
        "id": "5903df706bf17bf9",
        "type": "delay",
        "z": "55a762ae72fa441b",
        "g": "6a070793fb470a03",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 200,
        "wires": [
            [
                "b52637f4da03c425"
            ]
        ]
    },
    {
        "id": "7690e8c04058fd38",
        "type": "delay",
        "z": "55a762ae72fa441b",
        "g": "378995858571b39f",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 390,
        "y": 620,
        "wires": [
            [
                "108daae7a312a34f"
            ]
        ]
    },
    {
        "id": "da02d40547f5f97a",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "4a4f80625f8ea163",
        "name": "We just reset",
        "mode": "link",
        "links": [
            "48373ebe740e92b6"
        ],
        "x": 1535,
        "y": 160,
        "wires": []
    },
    {
        "id": "f2be5d92f9656966",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "4a4f80625f8ea163",
        "name": "Go to turn all off",
        "info": "",
        "x": 1580,
        "y": 120,
        "wires": []
    },
    {
        "id": "48373ebe740e92b6",
        "type": "link in",
        "z": "55a762ae72fa441b",
        "g": "378995858571b39f",
        "name": "someone wants to turn me off",
        "links": [
            "da02d40547f5f97a",
            "627488f25f62e8dc",
            "e2a7cf4a35c21f95",
            "66a6c020170412e9",
            "75062d25f49d697d"
        ],
        "x": 125,
        "y": 580,
        "wires": [
            [
                "54b84dae77542449"
            ]
        ]
    },
    {
        "id": "45e70a9ad7899e4d",
        "type": "debug",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "db bldg1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 2060,
        "wires": []
    },
    {
        "id": "9cbdb9d52fe7cf9a",
        "type": "debug",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "db bldg2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 2140,
        "wires": []
    },
    {
        "id": "03cc0a5688f63569",
        "type": "mqtt in",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "",
        "topic": "edgenode/balldrop/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bc90be16040a7d21",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 3180,
        "wires": [
            [
                "8b9f85415994242a",
                "7ec8575c8ae051af"
            ]
        ]
    },
    {
        "id": "8b9f85415994242a",
        "type": "debug",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "db received ball",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 3140,
        "wires": []
    },
    {
        "id": "81525ae27ca9e82c",
        "type": "inject",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "Fake ball MQTT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"num_drops\":1,\"timestamp\":10356098,\"BUILDING_NAME\":\"LBI\",\"side_id\":0}",
        "payloadType": "json",
        "x": 280,
        "y": 3240,
        "wires": [
            [
                "3324776758a34ef8"
            ]
        ]
    },
    {
        "id": "9bc5be050fadf6b6",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Send reset MQTT",
        "mode": "link",
        "links": [
            "1b55865e8e16d405"
        ],
        "x": 445,
        "y": 2520,
        "wires": []
    },
    {
        "id": "b92ea91a45968087",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "Convert to callback formats - LASER",
        "func": "/* \nExample input LASER:\n{\n  \"num_hits\": 1,\n  \"timestamp\": 415775,\n  \"timestamp\": 416493,\n  \"BUILDING_NAME\": \"LBM\",\n  \"side_id\": 1\n}\n\n\nDesired outputs for callback: \npayload.bldg, payload.newAddlWaterQty\n*/ \n\n//--- Basic variables \nvar input = msg.payload;\nvar nodeid = input.BUILDING_NAME; \nvar numHits = input.num_hits;  \nmsg.payload = {};\nnode.warn\n\n\n//--- FS update callback outputs\nmsg.payload.bldg = nodeid;\nmsg.payload.newAddlWaterQty = numHits;\n\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 3440,
        "wires": [
            [
                "3ddb4866a6ecb8fe"
            ]
        ]
    },
    {
        "id": "31c4db3eb2f36e59",
        "type": "link in",
        "z": "55a762ae72fa441b",
        "g": "6a070793fb470a03",
        "name": "someone wants to turn me on",
        "links": [
            "dc410816705aadf3",
            "971728897ecf9437"
        ],
        "x": 115,
        "y": 160,
        "wires": [
            [
                "5725302ea02fb9eb"
            ]
        ]
    },
    {
        "id": "9004aeb7ec1ed4bf",
        "type": "link in",
        "z": "55a762ae72fa441b",
        "g": "2971d7c90b74f3b4",
        "name": "TIME FOR PHASE 2",
        "links": [
            "fe84ce88167ea094"
        ],
        "x": 215,
        "y": 3920,
        "wires": [
            [
                "58af15e1f7b1e202",
                "53c404b6960d9d5d"
            ]
        ]
    },
    {
        "id": "692f7e973b247e3f",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "2971d7c90b74f3b4",
        "name": "TIME FOR PHASE 2",
        "info": "",
        "x": 270,
        "y": 3860,
        "wires": []
    },
    {
        "id": "dc410816705aadf3",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "2971d7c90b74f3b4",
        "name": "clap on",
        "mode": "link",
        "links": [
            "31c4db3eb2f36e59"
        ],
        "x": 665,
        "y": 4080,
        "wires": []
    },
    {
        "id": "4c72ca30adc671fc",
        "type": "delay",
        "z": "55a762ae72fa441b",
        "g": "2971d7c90b74f3b4",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 730,
        "y": 4040,
        "wires": [
            [
                "627488f25f62e8dc",
                "58af15e1f7b1e202"
            ]
        ]
    },
    {
        "id": "627488f25f62e8dc",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "2971d7c90b74f3b4",
        "name": "clap off",
        "mode": "link",
        "links": [
            "48373ebe740e92b6"
        ],
        "x": 865,
        "y": 4040,
        "wires": []
    },
    {
        "id": "58af15e1f7b1e202",
        "type": "loop",
        "z": "55a762ae72fa441b",
        "g": "2971d7c90b74f3b4",
        "name": "Mini Rave Loop",
        "kind": "fcnt",
        "count": "5",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "enum",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-index",
        "finalPayload": "final-count",
        "x": 500,
        "y": 3980,
        "wires": [
            [
                "b348ea8918f0e0bc"
            ],
            [
                "dc410816705aadf3",
                "4c72ca30adc671fc"
            ]
        ]
    },
    {
        "id": "41fe48a660030e78",
        "type": "inject",
        "z": "55a762ae72fa441b",
        "g": "2971d7c90b74f3b4",
        "name": "LET'S RAVE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 400,
        "y": 4060,
        "wires": [
            [
                "58af15e1f7b1e202"
            ]
        ]
    },
    {
        "id": "b348ea8918f0e0bc",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "2971d7c90b74f3b4",
        "name": "Phase 2 rave done",
        "mode": "link",
        "links": [
            "3f402ddd8643cce0"
        ],
        "x": 655,
        "y": 3960,
        "wires": []
    },
    {
        "id": "53c404b6960d9d5d",
        "type": "change",
        "z": "55a762ae72fa441b",
        "g": "2971d7c90b74f3b4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "curPhase",
                "pt": "global",
                "to": "2",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 3920,
        "wires": [
            [
                "244a5e68750deac1"
            ]
        ]
    },
    {
        "id": "d8060f8e62e726ce",
        "type": "debug",
        "z": "55a762ae72fa441b",
        "g": "4788e8d5cbe11d8f",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 2660,
        "wires": []
    },
    {
        "id": "244a5e68750deac1",
        "type": "delay",
        "z": "55a762ae72fa441b",
        "g": "2971d7c90b74f3b4",
        "name": "",
        "pauseType": "delay",
        "timeout": "2.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 3900,
        "wires": [
            [
                "8db898b77b6740df"
            ]
        ]
    },
    {
        "id": "9c7e5e9066493481",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "2971d7c90b74f3b4",
        "name": "pause for rave time",
        "info": "",
        "x": 650,
        "y": 3860,
        "wires": []
    },
    {
        "id": "8db898b77b6740df",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "2971d7c90b74f3b4",
        "name": "Phase 2 start",
        "mode": "link",
        "links": [
            "40c211c8e4f6180d"
        ],
        "x": 765,
        "y": 3900,
        "wires": []
    },
    {
        "id": "40c211c8e4f6180d",
        "type": "link in",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "start first buildings",
        "links": [
            "8db898b77b6740df",
            "c6215d4e2546a951"
        ],
        "x": 325,
        "y": 2100,
        "wires": [
            [
                "82a8466517112ffd"
            ]
        ]
    },
    {
        "id": "d236e6eee53270f4",
        "type": "link in",
        "z": "55a762ae72fa441b",
        "g": "e6f0aa02159bc664",
        "name": "TIME FOR PHASE 3",
        "links": [
            "6983c6fb1a960333",
            "fe84ce88167ea094"
        ],
        "x": 215,
        "y": 4400,
        "wires": [
            [
                "9b2dd509237ea4ba",
                "c9cff8053a0560cc"
            ]
        ]
    },
    {
        "id": "f31e8c8e319d93ce",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "e6f0aa02159bc664",
        "name": "TIME FOR PHASE 3",
        "info": "",
        "x": 270,
        "y": 4340,
        "wires": []
    },
    {
        "id": "971728897ecf9437",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "e6f0aa02159bc664",
        "name": "clap on",
        "mode": "link",
        "links": [
            "31c4db3eb2f36e59"
        ],
        "x": 665,
        "y": 4560,
        "wires": []
    },
    {
        "id": "2badacc9a7cff346",
        "type": "delay",
        "z": "55a762ae72fa441b",
        "g": "e6f0aa02159bc664",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 730,
        "y": 4520,
        "wires": [
            [
                "66a6c020170412e9",
                "9b2dd509237ea4ba"
            ]
        ]
    },
    {
        "id": "66a6c020170412e9",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "e6f0aa02159bc664",
        "name": "clap off",
        "mode": "link",
        "links": [
            "48373ebe740e92b6"
        ],
        "x": 865,
        "y": 4520,
        "wires": []
    },
    {
        "id": "9b2dd509237ea4ba",
        "type": "loop",
        "z": "55a762ae72fa441b",
        "g": "e6f0aa02159bc664",
        "name": "Mini Rave Loop",
        "kind": "fcnt",
        "count": "5",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "enum",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-index",
        "finalPayload": "final-count",
        "x": 500,
        "y": 4460,
        "wires": [
            [],
            [
                "971728897ecf9437",
                "2badacc9a7cff346"
            ]
        ]
    },
    {
        "id": "75bb4dcf27e09311",
        "type": "inject",
        "z": "55a762ae72fa441b",
        "g": "e6f0aa02159bc664",
        "name": "LET'S RAVE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 4540,
        "wires": [
            [
                "9b2dd509237ea4ba"
            ]
        ]
    },
    {
        "id": "c9cff8053a0560cc",
        "type": "change",
        "z": "55a762ae72fa441b",
        "g": "e6f0aa02159bc664",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "curPhase",
                "pt": "global",
                "to": "3",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 4400,
        "wires": [
            [
                "cd6470a4dd6dcf5a"
            ]
        ]
    },
    {
        "id": "cd6470a4dd6dcf5a",
        "type": "delay",
        "z": "55a762ae72fa441b",
        "g": "e6f0aa02159bc664",
        "name": "",
        "pauseType": "delay",
        "timeout": "2.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 4380,
        "wires": [
            [
                "d50e20b89aafa29b"
            ]
        ]
    },
    {
        "id": "a0b22b12a042c73b",
        "type": "comment",
        "z": "55a762ae72fa441b",
        "g": "e6f0aa02159bc664",
        "name": "pause for rave time",
        "info": "",
        "x": 650,
        "y": 4340,
        "wires": []
    },
    {
        "id": "d50e20b89aafa29b",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "e6f0aa02159bc664",
        "name": "Set ENDGAME qtys",
        "func": "var bldgs = [\"RTO\", \"RBO\", \"RTM\", \"RBM\", \"RTI\", \"RBI\", \"LBO\", \"LTO\", \"LBM\", \"LTM\", \"LBI\", \"LTI\"];\nfor (var i in bldgs) {\n\n    //Status - Dormant, At Risk(Unblocked), Blocked, Cleared, Damaged\n    global.set(bldgs[i] + \".Status\", \"ENDGAME\");\n\n    //Fire scores \n    global.set(bldgs[i] + \".FS.Window1-BeforeWater\", 8);\n    global.set(bldgs[i] + \".FS.Window2-BeforeWater\", 8);\n    global.set(bldgs[i] + \".FS.Window1-AfterWater\", 8);\n    global.set(bldgs[i] + \".FS.Window2-AfterWater\", 8);\n\n    // Water qtys - int\n    global.set(bldgs[i] + \".WaterQty\", 0);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 4380,
        "wires": [
            [
                "4c742ebce9027c25"
            ]
        ]
    },
    {
        "id": "4c742ebce9027c25",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "e6f0aa02159bc664",
        "name": "Push endgame statuses",
        "mode": "link",
        "links": [
            "3f402ddd8643cce0"
        ],
        "x": 1065,
        "y": 4380,
        "wires": []
    },
    {
        "id": "e4346dc3857e09be",
        "type": "change",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "curPhase",
                "pt": "global",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 2040,
        "wires": [
            [
                "82a8466517112ffd"
            ]
        ]
    },
    {
        "id": "6cbc63bf1ddca5ee",
        "type": "switch",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "phase != 0",
        "property": "curPhase",
        "propertyType": "global",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 410,
        "y": 3420,
        "wires": [
            [
                "b92ea91a45968087"
            ]
        ]
    },
    {
        "id": "7ec8575c8ae051af",
        "type": "switch",
        "z": "55a762ae72fa441b",
        "g": "b2c04e106e7697f0",
        "name": "phase != 0",
        "property": "curPhase",
        "propertyType": "global",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 410,
        "y": 3200,
        "wires": [
            [
                "3324776758a34ef8"
            ]
        ]
    },
    {
        "id": "6e9c04bbdc0780af",
        "type": "function",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Erupt Heating Building",
        "func": "//--- Set up vars\nvar theBldg = global.get(\"hotBldg\");\n\n\n//--- Light 'er up\nglobal.set(theBldg + \".Status\",\"Burning\");\nglobal.set(theBldg + \".FS.Window1-BeforeWater\", 8);\nglobal.set(theBldg + \".FS.Window2-BeforeWater\", 8);\nglobal.set(theBldg + \".FS.Window1-AfterWater\", 8);\nglobal.set(theBldg + \".FS.Window2-AfterWater\", 8);\nglobal.set(theBldg + \".GutterPixels\", \"333333330000000000000044444444\");\n\n//Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 2440,
        "wires": [
            [
                "53ad0d9118b96995"
            ]
        ]
    },
    {
        "id": "53ad0d9118b96995",
        "type": "link out",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "Bldg been erupted",
        "mode": "link",
        "links": [
            "3f402ddd8643cce0"
        ],
        "x": 1605,
        "y": 2440,
        "wires": []
    },
    {
        "id": "1c79cd9a48ef18c9",
        "type": "debug",
        "z": "55a762ae72fa441b",
        "g": "6a8702296ddd22a1",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 2520,
        "wires": []
    },
    {
        "id": "7a5f520857017bbb",
        "type": "mqtt in",
        "z": "47c0e0ae667846a9",
        "g": "0d233ae99a4c6065",
        "name": "",
        "topic": "edgenode/laserconfig/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bc90be16040a7d21",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 100,
        "wires": [
            [
                "70c149ec65fb102c"
            ]
        ]
    },
    {
        "id": "70c149ec65fb102c",
        "type": "ui_text",
        "z": "47c0e0ae667846a9",
        "g": "0d233ae99a4c6065",
        "group": "9b0778b1ab30b93e",
        "order": 1,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "Latest Debug Msg",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 470,
        "y": 100,
        "wires": []
    },
    {
        "id": "5f3e0a85eea68705",
        "type": "comment",
        "z": "47c0e0ae667846a9",
        "g": "0d233ae99a4c6065",
        "name": "Receive edgenode/laserconfig, parse, display",
        "info": "",
        "x": 230,
        "y": 60,
        "wires": []
    },
    {
        "id": "6c36dbfe44cb036b",
        "type": "comment",
        "z": "47c0e0ae667846a9",
        "name": "Receive heartbeat, parse, display",
        "info": "",
        "x": 1070,
        "y": 60,
        "wires": []
    },
    {
        "id": "35860ad47d848928",
        "type": "mqtt in",
        "z": "47c0e0ae667846a9",
        "name": "",
        "topic": "edgenode/heartbeat/LBM",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bc90be16040a7d21",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "666ddc2d1f9ad272",
                "9e2f4acaa87727e5",
                "98bdf92b14ea3f17",
                "d9f0243f09640174",
                "039c7e87a2f1695e",
                "f82ff874bcc830f9",
                "415dbe1befaea27f",
                "f26ed7948bc91a86",
                "99040e5844332efe"
            ]
        ]
    },
    {
        "id": "666ddc2d1f9ad272",
        "type": "ui_text",
        "z": "47c0e0ae667846a9",
        "group": "8ab51318efc44d27",
        "order": 2,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "Timestamp:",
        "format": "{{msg.payload.timestamp}}",
        "layout": "row-spread",
        "className": "",
        "x": 1370,
        "y": 140,
        "wires": []
    },
    {
        "id": "62457075fe8acc34",
        "type": "ui_text",
        "z": "47c0e0ae667846a9",
        "group": "8ab51318efc44d27",
        "order": 1,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "LBM",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1030,
        "y": 120,
        "wires": []
    },
    {
        "id": "9e2f4acaa87727e5",
        "type": "ui_text",
        "z": "47c0e0ae667846a9",
        "group": "8ab51318efc44d27",
        "order": 3,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "UUID:",
        "format": "{{msg.payload.uuid}}",
        "layout": "row-spread",
        "className": "",
        "x": 1350,
        "y": 180,
        "wires": []
    },
    {
        "id": "98bdf92b14ea3f17",
        "type": "ui_text",
        "z": "47c0e0ae667846a9",
        "group": "8ab51318efc44d27",
        "order": 4,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "bldg:",
        "format": "{{msg.payload.bldg}}",
        "layout": "row-spread",
        "className": "",
        "x": 1350,
        "y": 220,
        "wires": []
    },
    {
        "id": "d9f0243f09640174",
        "type": "ui_text",
        "z": "47c0e0ae667846a9",
        "group": "8ab51318efc44d27",
        "order": 5,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "IP Address:",
        "format": "{{msg.payload.ip_address}}",
        "layout": "row-spread",
        "className": "",
        "x": 1370,
        "y": 260,
        "wires": []
    },
    {
        "id": "0e16be23a79edb49",
        "type": "ui_slider",
        "z": "47c0e0ae667846a9",
        "g": "aa7cdd8f3125703c",
        "name": "",
        "label": "Laser Diff (default: 500)",
        "tooltip": "",
        "group": "9b0778b1ab30b93e",
        "order": 1,
        "width": "10",
        "height": "1",
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "100",
        "max": "3000",
        "step": "10",
        "className": "",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "39d591f75ab6581f"
            ]
        ]
    },
    {
        "id": "af913b1474ed43d9",
        "type": "comment",
        "z": "47c0e0ae667846a9",
        "g": "aa7cdd8f3125703c",
        "name": "Update LaserDiff",
        "info": "",
        "x": 140,
        "y": 200,
        "wires": []
    },
    {
        "id": "4f65e1b1c3249fbc",
        "type": "mqtt out",
        "z": "47c0e0ae667846a9",
        "g": "aa7cdd8f3125703c",
        "name": "",
        "topic": "nodered/laserdiff",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 730,
        "y": 240,
        "wires": []
    },
    {
        "id": "39d591f75ab6581f",
        "type": "change",
        "z": "47c0e0ae667846a9",
        "g": "aa7cdd8f3125703c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "DETECTOR_DIFF",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 240,
        "wires": [
            [
                "4f65e1b1c3249fbc",
                "6e6816ac951a5c0f"
            ]
        ]
    },
    {
        "id": "6e6816ac951a5c0f",
        "type": "debug",
        "z": "47c0e0ae667846a9",
        "g": "aa7cdd8f3125703c",
        "name": "attempt at mqtt json magic",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 300,
        "wires": []
    },
    {
        "id": "f82ff874bcc830f9",
        "type": "ui_text",
        "z": "47c0e0ae667846a9",
        "group": "8ab51318efc44d27",
        "order": 5,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "Heater_on:",
        "format": "{{msg.payload.ip_address}}",
        "layout": "row-spread",
        "className": "",
        "x": 1370,
        "y": 340,
        "wires": []
    },
    {
        "id": "415dbe1befaea27f",
        "type": "ui_text",
        "z": "47c0e0ae667846a9",
        "group": "8ab51318efc44d27",
        "order": 5,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "Latest_diff (laser):",
        "format": "{{msg.payload.latest_diff}}",
        "layout": "row-spread",
        "className": "",
        "x": 1390,
        "y": 380,
        "wires": []
    },
    {
        "id": "039c7e87a2f1695e",
        "type": "ui_text",
        "z": "47c0e0ae667846a9",
        "group": "8ab51318efc44d27",
        "order": 5,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "index (?):",
        "format": "{{msg.payload.index}}",
        "layout": "row-spread",
        "className": "",
        "x": 1360,
        "y": 300,
        "wires": []
    },
    {
        "id": "f26ed7948bc91a86",
        "type": "ui_text",
        "z": "47c0e0ae667846a9",
        "group": "8ab51318efc44d27",
        "order": 5,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "Latest_triggered_diff (laser):",
        "format": "{{msg.payload.latest_triggered_diff}}",
        "layout": "row-spread",
        "className": "",
        "x": 1420,
        "y": 420,
        "wires": []
    },
    {
        "id": "99040e5844332efe",
        "type": "ui_text",
        "z": "47c0e0ae667846a9",
        "group": "8ab51318efc44d27",
        "order": 5,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "MEM:",
        "format": "{{msg.payload.mem}}",
        "layout": "row-spread",
        "className": "",
        "x": 1350,
        "y": 460,
        "wires": []
    },
    {
        "id": "1c589feac1f746b9",
        "type": "comment",
        "z": "47c0e0ae667846a9",
        "name": "COPY THIS OUT FOR ALL NODES",
        "info": "",
        "x": 1160,
        "y": 580,
        "wires": []
    },
    {
        "id": "13b29febb8e2b3e9",
        "type": "comment",
        "z": "47c0e0ae667846a9",
        "g": "3a81c46c8f3762a2",
        "name": "Reset Match / Laser",
        "info": "",
        "x": 150,
        "y": 420,
        "wires": []
    },
    {
        "id": "042587d56aedd796",
        "type": "mqtt out",
        "z": "47c0e0ae667846a9",
        "g": "3a81c46c8f3762a2",
        "name": "",
        "topic": "nodered/reset/match",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 680,
        "y": 460,
        "wires": []
    },
    {
        "id": "478145ccd1cc1b6c",
        "type": "change",
        "z": "47c0e0ae667846a9",
        "g": "3a81c46c8f3762a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 460,
        "wires": [
            [
                "042587d56aedd796"
            ]
        ]
    },
    {
        "id": "1c1fbdd28c2c806b",
        "type": "ui_button",
        "z": "47c0e0ae667846a9",
        "g": "3a81c46c8f3762a2",
        "name": "",
        "group": "062c9dae52b8ca4a",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset Lasers",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "478145ccd1cc1b6c"
            ]
        ]
    },
    {
        "id": "1b55865e8e16d405",
        "type": "link in",
        "z": "47c0e0ae667846a9",
        "g": "3a81c46c8f3762a2",
        "name": "Resettin' time",
        "links": [
            "9bc5be050fadf6b6"
        ],
        "x": 125,
        "y": 460,
        "wires": [
            [
                "1c1fbdd28c2c806b"
            ]
        ]
    },
    {
        "id": "0bb4f2dd1a0c4bda",
        "type": "comment",
        "z": "175af8efcea2d591",
        "g": "2ac942eccf98a996",
        "name": "Main Table",
        "info": "",
        "x": 180,
        "y": 100,
        "wires": []
    },
    {
        "id": "8ddea564d172bf3f",
        "type": "ui_table",
        "z": "175af8efcea2d591",
        "g": "2ac942eccf98a996",
        "group": "ee9886ff6322a456",
        "name": "Bldg Statuses",
        "order": 6,
        "width": 10,
        "height": 7,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 680,
        "y": 240,
        "wires": []
    },
    {
        "id": "171f62c6c1563726",
        "type": "function",
        "z": "175af8efcea2d591",
        "g": "2ac942eccf98a996",
        "name": "Build Default Table Array",
        "func": "//vars \nvar bldgs = [\"RTO\", \"RBO\", \"RTM\", \"RBM\", \"RTI\", \"RBI\", \"LBO\", \"LTO\", \"LBM\", \"LTM\", \"LBI\", \"LTI\"];\nvar theArr = [];\n\n// do the loop, get the globals\nfor (var i=0; i < bldgs.length; i++) { \n    theArr.push({\n        \"Bldg\": bldgs[i],\n        \"Status\": global.get(bldgs[i]+\".Status\"),\n        \"Win1\": global.get(bldgs[i] + \".FS.Window1-AfterWater\"),\n        \"Win2\": global.get(bldgs[i] + \".FS.Window2-AfterWater\"),\n        \"WaterQty\": global.get(bldgs[i] + \".WaterQty\"),\n    });\n}\n//node.warn(theArr);\n\n//fin\nmsg.payload = theArr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 240,
        "wires": [
            [
                "8ddea564d172bf3f"
            ]
        ]
    },
    {
        "id": "05cbae4faf594123",
        "type": "ui_table",
        "z": "175af8efcea2d591",
        "g": "2ac942eccf98a996",
        "group": "ee9886ff6322a456",
        "name": "GutterPixels",
        "order": 7,
        "width": 10,
        "height": 7,
        "columns": [
            {
                "field": "Bldg",
                "title": "Bldg",
                "width": "20%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "GutterPixels",
                "title": "GutterPixels",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 690,
        "y": 300,
        "wires": []
    },
    {
        "id": "deaae49be7b573b0",
        "type": "function",
        "z": "175af8efcea2d591",
        "g": "2ac942eccf98a996",
        "name": "Build Default Table Array",
        "func": "//vars \nvar bldgs = [\"RTO\", \"RBO\", \"RTM\", \"RBM\", \"RTI\", \"RBI\", \"LBO\", \"LTO\", \"LBM\", \"LTM\", \"LBI\", \"LTI\"];\nvar theArr = [];\n\n// do the loop, get the globals\nfor (var i=0; i < bldgs.length; i++) { \n    theArr.push({\n        \"Bldg\": bldgs[i],\n        \"GutterPixels\": global.get(bldgs[i]+\".GutterPixels\")\n    });\n}\n//node.warn(theArr);\n\n//fin\nmsg.payload = theArr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 300,
        "wires": [
            [
                "05cbae4faf594123"
            ]
        ]
    },
    {
        "id": "892376e5bd117bc9",
        "type": "ui_button",
        "z": "175af8efcea2d591",
        "g": "2ac942eccf98a996",
        "name": "",
        "group": "ee9886ff6322a456",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 240,
        "y": 260,
        "wires": [
            [
                "171f62c6c1563726",
                "deaae49be7b573b0"
            ]
        ]
    },
    {
        "id": "c5d69c3b0f5e30ee",
        "type": "ui_button",
        "z": "175af8efcea2d591",
        "g": "2ac942eccf98a996",
        "name": "",
        "group": "3e7886cb7c605213",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": true,
        "label": "RESET ALL",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "0e3ebf9316c50718"
            ]
        ]
    },
    {
        "id": "0e3ebf9316c50718",
        "type": "link out",
        "z": "175af8efcea2d591",
        "g": "2ac942eccf98a996",
        "name": "JUST END IT",
        "mode": "link",
        "links": [
            "691a5afc5b52b78a"
        ],
        "x": 365,
        "y": 160,
        "wires": []
    },
    {
        "id": "412dda5307ab23bc",
        "type": "function",
        "z": "175af8efcea2d591",
        "name": "Set Window 1 FS",
        "func": "// Vars\nmsg.payload = {};\n\n// Set up params for callback node\nmsg.payload.bldg = \"LBI\";\nmsg.payload.window = 1;\nmsg.payload.numFire = 8;\n\n// Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 720,
        "wires": [
            [
                "3fbcebb8a982c031"
            ]
        ]
    },
    {
        "id": "11d191fddb70f4cf",
        "type": "function",
        "z": "175af8efcea2d591",
        "name": "Set Window 2 FS",
        "func": "// Vars\nmsg.payload = {};\n\n// Set up params for callback node\nmsg.payload.bldg = \"LBI\";\nmsg.payload.window = 2;\nmsg.payload.numFire = 8;\n\n// Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 760,
        "wires": [
            [
                "3fbcebb8a982c031"
            ]
        ]
    },
    {
        "id": "25bdc69949d0b152",
        "type": "comment",
        "z": "175af8efcea2d591",
        "g": "77bdfe65956919ec",
        "name": "Manual Injects for Testing",
        "info": "",
        "x": 230,
        "y": 540,
        "wires": []
    },
    {
        "id": "b3329dfa95503c2c",
        "type": "ui_button",
        "z": "175af8efcea2d591",
        "g": "77bdfe65956919ec",
        "name": "",
        "group": "3e7886cb7c605213",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": true,
        "label": "Set LBM to Max FS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 620,
        "wires": [
            [
                "2d07da5341cf14ee",
                "b8f41ef7533e00c1"
            ]
        ]
    },
    {
        "id": "1a9410ac2442e363",
        "type": "link out",
        "z": "175af8efcea2d591",
        "g": "77bdfe65956919ec",
        "name": "Manual set Max FS",
        "mode": "link",
        "links": [
            "0416ea6909311b42",
            "113bf2ef4799a486"
        ],
        "x": 645,
        "y": 620,
        "wires": []
    },
    {
        "id": "2d07da5341cf14ee",
        "type": "function",
        "z": "175af8efcea2d591",
        "g": "77bdfe65956919ec",
        "name": "Set Window 1 FS",
        "func": "// Vars\nmsg.payload = {};\n\n// Set up params for callback node\nmsg.payload.bldg = \"LBM\";\nmsg.payload.window = 1;\nmsg.payload.numFire = 8;\n\n// Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 600,
        "wires": [
            [
                "1a9410ac2442e363"
            ]
        ]
    },
    {
        "id": "b8f41ef7533e00c1",
        "type": "function",
        "z": "175af8efcea2d591",
        "g": "77bdfe65956919ec",
        "name": "Set Window 2 FS",
        "func": "// Vars\nmsg.payload = {};\n\n// Set up params for callback node\nmsg.payload.bldg = \"LBM\";\nmsg.payload.window = 2;\nmsg.payload.numFire = 8;\n\n// Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 640,
        "wires": [
            [
                "1a9410ac2442e363"
            ]
        ]
    },
    {
        "id": "811f25a4a4480bf7",
        "type": "ui_button",
        "z": "175af8efcea2d591",
        "g": "77bdfe65956919ec",
        "name": "",
        "group": "3e7886cb7c605213",
        "order": 4,
        "width": 5,
        "height": 1,
        "passthru": true,
        "label": "Send 2 Lasers to LBM",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 260,
        "y": 740,
        "wires": [
            [
                "d775d38173b3593c"
            ]
        ]
    },
    {
        "id": "d775d38173b3593c",
        "type": "function",
        "z": "175af8efcea2d591",
        "g": "77bdfe65956919ec",
        "name": "Set 2 hits",
        "func": "/* \nExample input: \n{\n    \"node_id\":\"LTO\",\n    \"num_hits\":5, \n    \"timestamp\":1234567890\n}\n*/ \n// Vars\nmsg.payload = {};\n\n// Set up messages that emulate the MQTT message\nmsg.payload.node_id = \"LBM\";\nmsg.payload.num_hits = 2;\nmsg.payload.timestamp = 1234567890;\n\n// Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 740,
        "wires": [
            [
                "8b81919795d67036"
            ]
        ]
    },
    {
        "id": "8b81919795d67036",
        "type": "link out",
        "z": "175af8efcea2d591",
        "g": "77bdfe65956919ec",
        "name": "Manual Send Lasers",
        "mode": "link",
        "links": [
            "da290e77a88988a7"
        ],
        "x": 645,
        "y": 740,
        "wires": []
    },
    {
        "id": "3014efb296f50a70",
        "type": "ui_button",
        "z": "175af8efcea2d591",
        "g": "77bdfe65956919ec",
        "name": "",
        "group": "3e7886cb7c605213",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": true,
        "label": "Set LBI to Max FS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 850,
        "y": 620,
        "wires": [
            [
                "412dda5307ab23bc",
                "11d191fddb70f4cf"
            ]
        ]
    },
    {
        "id": "3fbcebb8a982c031",
        "type": "link out",
        "z": "175af8efcea2d591",
        "g": "77bdfe65956919ec",
        "name": "Manual set Max FS",
        "mode": "link",
        "links": [
            "0416ea6909311b42",
            "113bf2ef4799a486"
        ],
        "x": 1295,
        "y": 620,
        "wires": []
    },
    {
        "id": "2c36544f165ecf61",
        "type": "comment",
        "z": "175af8efcea2d591",
        "g": "738dc520034f11a7",
        "name": "Overall Scoring Summaries",
        "info": "",
        "x": 230,
        "y": 860,
        "wires": []
    },
    {
        "id": "09e1bb987f6fc783",
        "type": "ui_switch",
        "z": "175af8efcea2d591",
        "g": "b16460b067e3329b",
        "name": "",
        "label": "Auto-Refresh",
        "tooltip": "",
        "group": "ee9886ff6322a456",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "318fd2d140ad472a"
            ]
        ]
    },
    {
        "id": "318fd2d140ad472a",
        "type": "trigger",
        "z": "175af8efcea2d591",
        "g": "b16460b067e3329b",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "false",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1240,
        "y": 140,
        "wires": [
            [
                "46514258ddd5880b"
            ]
        ]
    },
    {
        "id": "46514258ddd5880b",
        "type": "link out",
        "z": "175af8efcea2d591",
        "g": "b16460b067e3329b",
        "name": "so refreshing",
        "mode": "link",
        "links": [
            "bb41b3b3cc7b681d",
            "cc34e7492d373681",
            "af9851791b431668"
        ],
        "x": 1375,
        "y": 140,
        "wires": []
    },
    {
        "id": "e9c6866ca0db7662",
        "type": "comment",
        "z": "175af8efcea2d591",
        "g": "b16460b067e3329b",
        "name": "Status config",
        "info": "",
        "x": 990,
        "y": 100,
        "wires": []
    },
    {
        "id": "cc34e7492d373681",
        "type": "link in",
        "z": "175af8efcea2d591",
        "g": "2ac942eccf98a996",
        "name": "Hit the refresh btn",
        "links": [
            "46514258ddd5880b"
        ],
        "x": 135,
        "y": 260,
        "wires": [
            [
                "892376e5bd117bc9"
            ]
        ]
    },
    {
        "id": "bb41b3b3cc7b681d",
        "type": "link in",
        "z": "175af8efcea2d591",
        "g": "738dc520034f11a7",
        "name": "build the summary table",
        "links": [
            "46514258ddd5880b"
        ],
        "x": 185,
        "y": 900,
        "wires": [
            [
                "02424c99509bf97f"
            ]
        ]
    },
    {
        "id": "4f56704568189cfc",
        "type": "ui_text",
        "z": "175af8efcea2d591",
        "g": "738dc520034f11a7",
        "group": "1e4da6b2e1809214",
        "order": 1,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Total FS",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 480,
        "y": 900,
        "wires": []
    },
    {
        "id": "02424c99509bf97f",
        "type": "function",
        "z": "175af8efcea2d591",
        "g": "738dc520034f11a7",
        "name": "Calc total FS",
        "func": "\n// --- Set up vars\nvar bldgs = [\"RTO\", \"RBO\", \"RTM\", \"RBM\", \"RTI\", \"RBI\", \"LBO\", \"LTO\", \"LBM\", \"LTM\", \"LBI\", \"LTI\"];\nvar theTotalFS = 0;\n\n// --- Loop through all buildings, add up total FS\nfor (var i in bldgs) {\n    theTotalFS += global.get(bldgs[i] + \".FS.Window1-AfterWater\") + global.get(bldgs[i] + \".FS.Window2-AfterWater\");\n}\n\n// Fin\nmsg.payload = theTotalFS;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 900,
        "wires": [
            [
                "4f56704568189cfc"
            ]
        ]
    },
    {
        "id": "af9851791b431668",
        "type": "link in",
        "z": "175af8efcea2d591",
        "g": "738dc520034f11a7",
        "name": "build the summary table",
        "links": [
            "46514258ddd5880b"
        ],
        "x": 185,
        "y": 960,
        "wires": [
            [
                "857fda300015cd6e"
            ]
        ]
    },
    {
        "id": "857fda300015cd6e",
        "type": "function",
        "z": "175af8efcea2d591",
        "g": "738dc520034f11a7",
        "name": "Calc total DS",
        "func": "\n// --- Set up vars\nvar bldgs = [\"RTO\", \"RBO\", \"RTM\", \"RBM\", \"RTI\", \"RBI\", \"LBO\", \"LTO\", \"LBM\", \"LTM\", \"LBI\", \"LTI\"];\nvar theTotalFS = 0;\n\n// --- Loop through all buildings, add up total FS\nfor (var i in bldgs) {\n    theTotalFS += global.get(bldgs[i] + \".FS.Window1-AfterWater\") + global.get(bldgs[i] + \".FS.Window2-AfterWater\");\n}\n\n// Fin\nmsg.payload = theTotalFS;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 960,
        "wires": [
            [
                "d896e715d917cdf2"
            ]
        ]
    },
    {
        "id": "d896e715d917cdf2",
        "type": "ui_text",
        "z": "175af8efcea2d591",
        "g": "738dc520034f11a7",
        "group": "1e4da6b2e1809214",
        "order": 1,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Total DS",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 480,
        "y": 960,
        "wires": []
    },
    {
        "id": "0416ea6909311b42",
        "type": "link in",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "Update FS",
        "links": [
            "71df01656749e372",
            "42fbeec64825d3a1",
            "c612b81a64bb9759",
            "b4f3a4589cdc9edf",
            "d0e47829bbab10d2",
            "6f5b0006051e39ef",
            "41518b531082b3d7",
            "1a9410ac2442e363",
            "0cfa25e363535ffd",
            "ed138ca6db856899",
            "7e1e1ed2c52487f5",
            "3fbcebb8a982c031"
        ],
        "x": 155,
        "y": 240,
        "wires": [
            [
                "8078387b8154fc28",
                "085de4503ad6ec20"
            ]
        ]
    },
    {
        "id": "187c6afe9262807c",
        "type": "comment",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "Update FS BEFORE WATER\\n payload.bldg, payload.window, payload.numFire",
        "info": "",
        "x": 290,
        "y": 120,
        "wires": []
    },
    {
        "id": "8078387b8154fc28",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "Update Window Global",
        "func": "//--- Basic variables\nvar input = msg.payload;\nvar theBldg = msg.payload.bldg;\nvar theWin = msg.payload.window;\nvar theFS = msg.payload.numFire;\n\n//--- Update Global Variables\nvar theGlobalString = theBldg + \".FS.Window\" + theWin + \"-BeforeWater\";\nglobal.set(theGlobalString,theFS);\n\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "dda9a78374edd0d2"
            ]
        ]
    },
    {
        "id": "5acfacf7a05cc895",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "Update GutterPixels Global - Requires AfterWater String",
        "func": "/* \nGutter is built with 30 pixels\n[0-7]   = Window 1 FS\n[8-9]   = Blank (spacer)\n[10-19] = Status\n[20-21] = Blank (spacer)\n[22-29] = Window 2 FS\n\nColor wheel:\n0 = OFF\n1 = RED\n2 = ORANGE\n3 = YELLOW\n4 = GREEN\n5 = BLUE\n6 = PURPLE\n^^ Don't forget to make these a string, not an int\n*/ \n\n//--- Basic variables\nvar input = msg.payload;\nvar theBldg = msg.payload.bldg;\nvar theWin = msg.payload.window;\n\n// --FS is no longer a basic variable, since you'll have to depend on VISIBLE (after Water) fire\nvar theFS = global.get(theBldg+\".FS.Window\" + theWin + \"-AfterWater\");\n\n//--- Get current gutterpixels, delete the relevant window's substring \n//string.substring(indexStart, indexEnd)\nvar curPixelString = global.get(theBldg + \".GutterPixels\");\nif (theWin == 1) {\n    var stringMinusWindow = curPixelString.substring(8, 30); //will want to check off-by-one issues\n    var theColor = \"3\"; // YELLOW\n} else if (theWin == 2) {\n    var stringMinusWindow = curPixelString.substring(0, 22); //will want to check off-by-one issues\n    var theColor = \"4\"; // RED\n}\n//node.warn(stringMinusWindow);\n\n//--- Build the new window's string\nvar newWindowString = \"\";\n//-- Add 1's up to the FS, then 0's after that to only light up the FS pixels\n// off-by-one _should_ work out alright? \n// also js shorthand woo https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\nfor (let i=0; i<8; i++) {\n    newWindowString += i<theFS ? theColor : \"0\"; \n}\n\n//--- Combino preparo \n//node.warn(newWindowString);\n//node.warn(stringMinusWindow);\nif (theWin == 1) {\n    var newPixelString = newWindowString + stringMinusWindow; \n} else if (theWin == 2) {\n    var newPixelString = stringMinusWindow + newWindowString;\n}\n\n//--- Fin\nglobal.set(theBldg + \".GutterPixels\", newPixelString);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 240,
        "wires": [
            [
                "926f27b7e8249ddb"
            ]
        ]
    },
    {
        "id": "926f27b7e8249ddb",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "Build MQTT Msg for Gutter",
        "func": "/*\n---- WILL NEED TO UPDATE ONCE WE KNOW HOW \"WHICHLEDS\" WORKS ---\n\nmsg1.topic = \"nodered/updategutter/full/\" + theBldgs[0];\nmsg1.payload = \"{ \\\"color\\\":\\\"FFFF00\\\" }\";\n\n*/ \n\n//--- Basic variables\nvar input = msg.payload;\nvar node_id = msg.payload.bldg;\nvar theGutter = 0; //-=-=-=-==-=\n\n\n//--- Set up MQTT message\nvar gutterString = global.get(node_id + \".GutterPixels\");\n//var gutterString = \"333333333333333333333333333333\";\nmsg.topic = \"nodered/updatepixels/\" + node_id;\nmsg.payload = \"{ \\\"whichLeds\\\":\" + theGutter + \", \" +\n    \"\\\"pixels\\\": \\\"\" + gutterString + \"\\\"\" +\n    \"}\";\n//node.warn(msg);\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 280,
        "wires": [
            [
                "5f0bcff5c4ed6ec4"
            ]
        ]
    },
    {
        "id": "ed2d399b29970928",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "Build MQTT Msg for Window",
        "func": "//--- Basic variables\nvar input = msg.payload;\nvar node_id = msg.payload.bldg;\nvar theWin = msg.payload.window;\n\nvar theFS = global.get(node_id + \".FS.Window\" + theWin + \"-AfterWater\");\n\n//--- Build MQTT message\nif (theFS > 0) {\n    msg.topic = \"nodered/lighton/\" + node_id;\n} else if (theFS == 0) {\n    msg.topic = \"nodered/lightoff/\" + node_id;\n}\nmsg.payload = \"{ \\\"whichLight\\\":\" + theWin + \"}\"\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 360,
        "wires": [
            [
                "f986ab9711daf36b"
            ]
        ]
    },
    {
        "id": "5f0bcff5c4ed6ec4",
        "type": "mqtt out",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 1470,
        "y": 280,
        "wires": []
    },
    {
        "id": "f986ab9711daf36b",
        "type": "mqtt out",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 1470,
        "y": 360,
        "wires": []
    },
    {
        "id": "085de4503ad6ec20",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "Update Status Global",
        "func": "//--- Basic variables\nvar input = msg.payload;\nvar node_id = msg.payload.bldg;\nvar theWin = msg.payload.window;\nvar theFS = msg.payload.numFire;\n\n//--- Build MQTT message\nif (theFS > 0) {\n    global.set(node_id+\".Status\", \"Burning\");\n} else if (theFS == 0) {\n    global.set(node_id + \".Status\", \"Cleared\");\n}\n\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "7138aeefb2263d68",
        "type": "comment",
        "z": "f6f035102302ba5a",
        "g": "5f1037ebc6dbd72f",
        "name": "Update GutterPixels \\n payload.bldg, payload.pixelstring",
        "info": "",
        "x": 230,
        "y": 620,
        "wires": []
    },
    {
        "id": "f8afe1542a91baa2",
        "type": "link in",
        "z": "f6f035102302ba5a",
        "g": "5f1037ebc6dbd72f",
        "name": "Update GutterPixels",
        "links": [
            "ae0759e01e0881af"
        ],
        "x": 165,
        "y": 680,
        "wires": [
            [
                "f976aafaf0f9a3c1"
            ]
        ]
    },
    {
        "id": "f976aafaf0f9a3c1",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "5f1037ebc6dbd72f",
        "name": "Update GutterPixels Global",
        "func": "/* \nGutter is built with 30 pixels\n[0-7]   = Window 1 FS\n[8-9]   = Blank (spacer)\n[10-19] = Status\n[20-21] = Blank (spacer)\n[22-29] = Window 2 FS\n*/ \n\n//--- Basic variables\nvar input = msg.payload;\nvar theBldg = input.bldg;\nvar theString = input.pixelstring;\n\n//--- Update global\nglobal.set(theBldg + \".GutterPixels\", theString);\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 680,
        "wires": [
            [
                "2d3d077a6a33a90f"
            ]
        ]
    },
    {
        "id": "2d3d077a6a33a90f",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "5f1037ebc6dbd72f",
        "name": "Build MQTT Msg for Gutter",
        "func": "/*\n---- WILL NEED TO UPDATE ONCE WE KNOW HOW \"WHICHLEDS\" WORKS ---\n*/ \n\n//--- Basic variables\nvar input = msg.payload;\nvar node_id = input.bldg;\nvar theGutter = 0; //-=-=-===--==\n\n//--- Set up MQTT message\nvar gutterString = global.get(node_id + \".GutterPixels\");\nmsg.topic = \"nodered/updatepixels/\" + node_id;\nmsg.payload = \"{ \\\"whichLeds\\\":\" + theGutter + \", \" +\n    \"\\\"pixels\\\": \\\"\" + gutterString + \"\\\"\" +\n    \"}\";\n//{   \"whichLeds\":0,   \"pixels\":\"111111111111111444444444444444\" }\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 720,
        "wires": [
            [
                "19c221d99629ee7a"
            ]
        ]
    },
    {
        "id": "19c221d99629ee7a",
        "type": "mqtt out",
        "z": "f6f035102302ba5a",
        "g": "5f1037ebc6dbd72f",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 650,
        "y": 720,
        "wires": []
    },
    {
        "id": "42500fdf3edadd8f",
        "type": "comment",
        "z": "f6f035102302ba5a",
        "g": "459fe488a5804676",
        "name": "Update WaterQty\\n payload.bldg, payload.newAddlWaterQty",
        "info": "",
        "x": 260,
        "y": 860,
        "wires": []
    },
    {
        "id": "ab46c7d25d3bb74b",
        "type": "link in",
        "z": "f6f035102302ba5a",
        "g": "459fe488a5804676",
        "name": "Update Water Qty",
        "links": [
            "3ddb4866a6ecb8fe"
        ],
        "x": 165,
        "y": 1020,
        "wires": [
            [
                "64807321f86b9125"
            ]
        ]
    },
    {
        "id": "570cc8a3dd014038",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "459fe488a5804676",
        "name": "Update WaterQty, prep new FS",
        "func": "/* \nExample input: \nmsg.payload.bldg = \"RTO\";\nmsg.payload.newAddlWaterQty = 3;\n*/ \n\n//--- Basic variables \nvar input = msg.payload;\nvar nodeid = input.bldg;\nvar newWater = input.newAddlWaterQty;\nvar msg1 = {};\nmsg1.payload = {};\nvar msg2 = {};\nmsg2.payload = {};\n\n//--- Get the globals\nvar win1_FS_pre = global.get(nodeid + \".FS.Window1-BeforeWater\");\nvar win2_FS_pre = global.get(nodeid + \".FS.Window2-BeforeWater\");\n\n//--- Do some quick water math\nvar curWaterQty = global.get(nodeid + \".WaterQty\");\nvar newWaterQty = curWaterQty + newWater;\nglobal.set(nodeid + \".WaterQty\", newWaterQty);\n\n//-----------\n//--- HOW MANY WATERS PER PIXEL / FS / BLIP ? \n// ---- Technically, in the manual, it is 4x for water drop balls, 2x for lasers\n//-----------\nswitch(nodeid) {\n    //laser\n    case \"LBO\":\n    case \"LTM\":\n    case \"LBM\":\n    case \"RTO\":\n    case \"RBM\":\n    case \"RTM\":\n        var WATER_PER_FS = 2;\n\n    //balls\n    case \"RTO\":\n    case \"RTI\":\n    case \"RBI\":\n    case \"RBO\":\n    case \"RBI\":\n    case \"RTI\":\n        var WATER_PER_FS = 4;\n}\nvar MAX_POSS_FS = 8;\n\n//--- Take the \"before Water\" FS's, and bang em against the water, and get new \"after Water\" FS's\nvar impactToFS = Math.floor(newWaterQty / WATER_PER_FS);\nnode.warn(impactToFS);\nvar the_FS_thats_left = (win1_FS_pre + win2_FS_pre) - impactToFS; \nnode.warn(\"theleft\");\nnode.warn(the_FS_thats_left);\nif (the_FS_thats_left > MAX_POSS_FS) { \n    var win1_FS_post = MAX_POSS_FS;\n    var win2_FS_post = the_FS_thats_left - MAX_POSS_FS;\n} else { \n    var win1_FS_post = the_FS_thats_left;\n    var win2_FS_post = 0;\n}\nnode.warn(win1_FS_post);\nnode.warn(win2_FS_post);\n\n//--- Prep FS update callback\n//payload.bldg, payload.window, payload.numFire\nmsg1.payload.bldg = nodeid;\nmsg1.payload.window = 1;\nmsg1.payload.numFire = win1_FS_post;\n\nmsg2.payload.bldg = nodeid;\nmsg2.payload.window = 2;\nmsg2.payload.numFire = win2_FS_post;\n\n//rrrrrap it up\nreturn [msg1, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 960,
        "wires": [
            [
                "7e1e1ed2c52487f5",
                "f4ccd769fbdd6843"
            ],
            [
                "8498c6ad0a1a8df7"
            ]
        ]
    },
    {
        "id": "7e1e1ed2c52487f5",
        "type": "link out",
        "z": "f6f035102302ba5a",
        "g": "459fe488a5804676",
        "name": "Water Hitting FS",
        "mode": "link",
        "links": [
            "0416ea6909311b42",
            "113bf2ef4799a486"
        ],
        "x": 1395,
        "y": 940,
        "wires": []
    },
    {
        "id": "505ee7d447687c96",
        "type": "comment",
        "z": "f6f035102302ba5a",
        "g": "459fe488a5804676",
        "name": "Send this to the FS callback\\n Delay to avoid windows stepping on each other",
        "info": "",
        "x": 1460,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8498c6ad0a1a8df7",
        "type": "delay",
        "z": "f6f035102302ba5a",
        "g": "459fe488a5804676",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1290,
        "y": 980,
        "wires": [
            [
                "7e1e1ed2c52487f5"
            ]
        ]
    },
    {
        "id": "192043bb5930e80f",
        "type": "function",
        "z": "f6f035102302ba5a",
        "d": true,
        "g": "459fe488a5804676",
        "name": "[obsolete method for this]",
        "func": "/* \nExample input: \nmsg.payload.bldg = \"RTO\";\nmsg.payload.newAddlWaterQty = 3;\n*/ \n\n//--- Basic variables \nvar input = msg.payload;\nvar nodeid = input.bldg;\nvar newWater = input.newAddlWaterQty;\nvar msg1 = {};\nmsg1.payload = {};\nvar msg2 = {};\nmsg2.payload = {};\n\n//--- Get the globals\nvar win1_FS_pre = global.get(nodeid + \".FS.Window1.BeforeWater\");\nvar win2_FS_pre = global.get(nodeid + \".FS.Window2.BeforeWater\");\n\n//--- Do some quick water math\nvar curWaterQty = global.get(nodeid + \".WaterQty\");\nvar newWaterQty = curWaterQty + newWater;\n\n//-----------\n//--- HOW MANY WATERS PER PIXEL / FS / BLIP ? \n// ---- Technically, in the manual, it is 4x for water drop balls, 2x for lasers\n//-----------\nswitch(nodeid) {\n    //laser\n    case \"LBO\":\n    case \"LTM\":\n    case \"LBM\":\n    case \"RTO\":\n    case \"RBM\":\n    case \"RTM\":\n        var WATER_PER_FS = 2;\n\n    //balls\n    case \"RTO\":\n    case \"RTI\":\n    case \"RBI\":\n    case \"RBO\":\n    case \"RBI\":\n    case \"RTI\":\n        var WATER_PER_FS = 4;\n}\nvar MAX_POSS_FS = 8;\n\n/* Example: \n- Win1FS = 8 | Win2FS = 3 | WaterQty = 2 | NewWaterQty = 12\nEnough water is dropped to drop 12 FS points (wateredDownAmt = 12)\n- 8 of this goes to window 1\n- 4 of this goes to window 2\nOtherwise, it just sticks to window 1.\n- THIS IS TRUE EVEN IF window 2 is active.\n- This is part of the \"back to basics\" gameplay.  Is it \"right\" or \"the best\"?  Probably not.. but it's easy\nANOTHER CURRENT ISSUE\n- Currently, this just tracks one master \"water amt\" \n- So theoretically, if your waterqty exceeds window1's amt, it will \"proactively\" count towards window2\n- Probably need to fix this later...\n\nalso.... this is probably way overcomplicated and the result of late night work\n\nthis iwill just need lots of testing\n*/ \nvar wateredDownAmt = Math.floor(newWaterQty / WATER_PER_FS);\n//node.warn(wateredDownAmt);\nif (wateredDownAmt >= 8) {\n    var firstWindowWater = 8;\n    var secondWindowWater = wateredDownAmt - 8;\n} else {\n    var firstWindowWater = wateredDownAmt;\n    var secondWindowWater = 0;\n}\n//node.warn(firstWindowWater);\n//node.warn(secondWindowWater);\n\n\n//--- Calc new FS's\nvar newFS_Win1 = win1_FS - (MAX_POSS_FS - firstWindowWater);\nvar newFS_Win2 = win2_FS - (MAX_POSS_FS - secondWindowWater);\n//node.warn(newFS_Win1);\n\n//--- Update globals\nglobal.set(nodeid+\".WaterQty\", newWaterQty);\n\n\n//--- Prep output for FS update callback\n//payload.bldg, payload.window, payload.numFire\nmsg1.payload.bldg = nodeid;\nmsg1.payload.window = 1;\nmsg1.payload.numFire = win1_FS > 0 ? newFS_Win1 : 0;\n\nmsg2.payload.bldg = nodeid;\nmsg2.payload.window = 2;\nmsg2.payload.numFire = win2_FS > 0 ? newFS_Win2 : 0;\n\n//--- Fin\n//return [msg1, msg2];",
        "outputs": 2,
        "noerr": 4,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 880,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f4ccd769fbdd6843",
        "type": "debug",
        "z": "f6f035102302ba5a",
        "g": "459fe488a5804676",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 920,
        "wires": []
    },
    {
        "id": "63f18a575dc37f3b",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "Convert BeforeWater -> AfterWater",
        "func": "//--- Basic variables \nvar input = msg.payload;\nvar nodeid = input.bldg;\nvar msg1 = {};\nmsg1.payload = {};\nvar msg2 = {};\nmsg2.payload = {};\n\n//--- Get the globals\nvar win1_FS_pre = global.get(nodeid + \".FS.Window1-BeforeWater\");\nvar win2_FS_pre = global.get(nodeid + \".FS.Window2-BeforeWater\");\nvar theWater = global.get(nodeid + \".WaterQty\");\n\n//--- Do some quick math\nvar MAX_POSS_FS = 8;\nswitch (nodeid) {\n    //-- LASER \n    case \"LBO\":\n    case \"LTM\":\n    case \"LBM\":\n    case \"RTO\":\n    case \"RBM\":\n    case \"RTM\":\n        var WATER_PER_FS = 1; //-- LASER\n\n    //-- BALLS \n    case \"RTO\":\n    case \"RTI\":\n    case \"RBI\":\n    case \"LBO\":\n    case \"LBI\":\n    case \"LTI\":\n        var WATER_PER_FS = 2; //-- BALLS \n}\n\n//--- Take the \"before Water\" FS's, and bang em against the water, and get new \"after Water\" FS's\nvar impactToFS = Math.floor(theWater / WATER_PER_FS);\n//node.warn(impactToFS);\nvar the_FS_thats_left = (win1_FS_pre + win2_FS_pre) - impactToFS;\n//node.warn(the_FS_thats_left);\nif (the_FS_thats_left > MAX_POSS_FS) {\n    var win1_FS_post = MAX_POSS_FS;\n    var win2_FS_post = the_FS_thats_left - MAX_POSS_FS;\n} else {\n    var win1_FS_post = the_FS_thats_left;\n    var win2_FS_post = 0;\n}\n//node.warn(win1_FS_post);\n//node.warn(win2_FS_post);\n\n//--- Update de globals\nglobal.set(nodeid + \".FS.Window1-AfterWater\", win1_FS_post);\nglobal.set(nodeid + \".FS.Window2-AfterWater\", win2_FS_post);\n\n//--- Prep FS update callback\n//payload.bldg, payload.window, payload.numFire\nmsg1.payload.bldg = nodeid;\nmsg1.payload.window = 1;\nmsg1.payload.numFire = win1_FS_post;\nmsg2.payload.bldg = nodeid;\nmsg2.payload.window = 2;\nmsg2.payload.numFire = win2_FS_post;\n\n//rrrrrap it up\nreturn [msg1, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 240,
        "wires": [
            [
                "5acfacf7a05cc895",
                "ed2d399b29970928",
                "619a82dad0d84d31"
            ],
            [
                "5acfacf7a05cc895",
                "ed2d399b29970928"
            ]
        ]
    },
    {
        "id": "64807321f86b9125",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "459fe488a5804676",
        "name": "Update WaterQty, send to kickoff FS update",
        "func": "/* \nExample input: \nmsg.payload.bldg = \"RTO\";\nmsg.payload.newAddlWaterQty = 3;\n*/ \n\n//--- Basic variables \nvar input = msg.payload;\nvar nodeid = input.bldg;\nvar newWater = input.newAddlWaterQty;\nmsg.payload = {};\n\n//node.warn(\"addlwater\");\n//node.warn(newWater);\n\n\n//--- Do some quick water math\nvar curWaterQty = global.get(nodeid + \".WaterQty\");\ncurWaterQty = curWaterQty === undefined ? 0 : curWaterQty; // don't poison the waterhole\nvar newWaterQty = curWaterQty + newWater;\n//node.warn(newWaterQty);\n//node.warn(newWaterQty);\n\n//--- Update the gloabl\nglobal.set(nodeid + \".WaterQty\", newWaterQty);\n\n\n//--- Prep FS update callback\n// ???\nmsg.payload.bldg = nodeid;\n\n//rrrrrap it up\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1020,
        "wires": [
            [
                "71f67f7f27cafd81"
            ]
        ]
    },
    {
        "id": "dda9a78374edd0d2",
        "type": "link out",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "To Window Washing",
        "mode": "link",
        "links": [
            "a25ecc470396a417"
        ],
        "x": 485,
        "y": 220,
        "wires": []
    },
    {
        "id": "a25ecc470396a417",
        "type": "link in",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "Time to Wash Windows",
        "links": [
            "dda9a78374edd0d2",
            "71f67f7f27cafd81"
        ],
        "x": 655,
        "y": 240,
        "wires": [
            [
                "63f18a575dc37f3b"
            ]
        ]
    },
    {
        "id": "71f67f7f27cafd81",
        "type": "link out",
        "z": "f6f035102302ba5a",
        "g": "459fe488a5804676",
        "name": "To Window Washing",
        "mode": "link",
        "links": [
            "a25ecc470396a417"
        ],
        "x": 605,
        "y": 1020,
        "wires": []
    },
    {
        "id": "f5ac07449078a00d",
        "type": "comment",
        "z": "f6f035102302ba5a",
        "g": "11a9b9cee18f6b6c",
        "name": "Update ALL BLDGS from Globals",
        "info": "",
        "x": 230,
        "y": 1220,
        "wires": []
    },
    {
        "id": "3c85efd6b9fe4796",
        "type": "ui_button",
        "z": "f6f035102302ba5a",
        "g": "11a9b9cee18f6b6c",
        "name": "",
        "group": "ee9886ff6322a456",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": true,
        "label": "Push all Bldgs to MQTT",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 290,
        "y": 1280,
        "wires": [
            [
                "b497a4557843716d"
            ]
        ]
    },
    {
        "id": "7503e9afbf970c67",
        "type": "mqtt out",
        "z": "f6f035102302ba5a",
        "g": "11a9b9cee18f6b6c",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 770,
        "y": 1360,
        "wires": []
    },
    {
        "id": "36c9b826c07c4844",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "11a9b9cee18f6b6c",
        "name": "Set Light 1 MQTT Msg",
        "func": "//--- Basic variables\nvar node_id = msg.payload;\n\n//--- Set up MQTT message\nif (global.get(node_id+\".FS.Window1-AfterWater\") > 0) { \n    msg.topic = \"nodered/lighton/\"+node_id;\n} else {\n    msg.topic = \"nodered/lightoff/\"+node_id;\n}\nmsg.payload = \"{ \\\"whichLight\\\":1 }\";\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1360,
        "wires": [
            [
                "7503e9afbf970c67"
            ]
        ]
    },
    {
        "id": "b497a4557843716d",
        "type": "loop",
        "z": "f6f035102302ba5a",
        "g": "11a9b9cee18f6b6c",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "[\"RTO\",\"RBO\",\"RTM\",\"RBM\",\"RTI\",\"RBI\",\"LBI\",\"LTI\",\"LBM\",\"LTM\",\"LBO\",\"LTO\"]",
        "enumerationType": "json",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 530,
        "y": 1280,
        "wires": [
            [],
            [
                "36c9b826c07c4844",
                "223c3fe920a91621",
                "b019d27b1b388b63"
            ]
        ]
    },
    {
        "id": "223c3fe920a91621",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "11a9b9cee18f6b6c",
        "name": "Set Gutter MQTT msg",
        "func": "//--- Basic variables\nvar node_id = msg.payload;\n\n//--- Set up MQTT message\nmsg.topic = \"nodered/updatepixels/\"+node_id;\nmsg.payload = \"{ \\\"whichLeds\\\":0, \" +\n    \"\\\"pixels\\\": \\\"\" + global.get(node_id+\".GutterPixels\") + \"\\\"\" +\n    \"}\";\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1440,
        "wires": [
            [
                "270a5506f8851358",
                "b497a4557843716d"
            ]
        ]
    },
    {
        "id": "270a5506f8851358",
        "type": "mqtt out",
        "z": "f6f035102302ba5a",
        "g": "11a9b9cee18f6b6c",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 770,
        "y": 1440,
        "wires": []
    },
    {
        "id": "b019d27b1b388b63",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "11a9b9cee18f6b6c",
        "name": "Set Light 2 MQTT Msg",
        "func": "//--- Basic variables\nvar node_id = msg.payload;\n\n//--- Set up MQTT message\nif (global.get(node_id + \".FS.Window2-AfterWater\") > 0) {\n    msg.topic = \"nodered/lighton/\" + node_id;\n} else {\n    msg.topic = \"nodered/lightoff/\" + node_id;\n}\nmsg.payload = \"{ \\\"whichLight\\\":2 }\";\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1400,
        "wires": [
            [
                "74e30c503ee7b8b0"
            ]
        ]
    },
    {
        "id": "74e30c503ee7b8b0",
        "type": "mqtt out",
        "z": "f6f035102302ba5a",
        "g": "11a9b9cee18f6b6c",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 770,
        "y": 1400,
        "wires": []
    },
    {
        "id": "3f402ddd8643cce0",
        "type": "link in",
        "z": "f6f035102302ba5a",
        "g": "11a9b9cee18f6b6c",
        "name": "Update All Bldgs IN",
        "links": [
            "cb167d27c1e7d778",
            "4c742ebce9027c25",
            "53ad0d9118b96995",
            "b348ea8918f0e0bc"
        ],
        "x": 135,
        "y": 1280,
        "wires": [
            [
                "3c85efd6b9fe4796"
            ]
        ]
    },
    {
        "id": "619a82dad0d84d31",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "Check if Phase change ready (totalFS = 0)",
        "func": "/* \nEvery time you're updating a FS, check to see if it's the LAST ONE  :O\n*/ \n\n// --- Set up vars\nvar bldgs = [\"RTO\", \"RBO\", \"RTM\", \"RBM\", \"RTI\", \"RBI\", \"LBO\", \"LTO\", \"LBM\", \"LTM\", \"LBI\", \"LTI\"];\nvar theTotalFS = 0;\nvar theTotalWater = 0;\n\n// --- Loop through all buildings, add up total FS\nfor (var i in bldgs) {\n    theTotalFS += global.get(bldgs[i] + \".FS.Window1-AfterWater\") + global.get(bldgs[i] + \".FS.Window2-AfterWater\");\n    theTotalWater += global.get(bldgs[i]+\".WaterQty\"); // no cheating\n}\n\n// --- If it's gone, LET'S GO\nmsg.payload = (theTotalFS <= 0 && theTotalWater >= 30) ? true : false;\nnode.warn(theTotalFS);\n// fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 140,
        "wires": [
            [
                "2a37db221e4919dc"
            ]
        ]
    },
    {
        "id": "2a37db221e4919dc",
        "type": "switch",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "If ready",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1800,
        "y": 140,
        "wires": [
            [
                "5c0e589cb02e5ad4"
            ]
        ]
    },
    {
        "id": "fe84ce88167ea094",
        "type": "link out",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "GOTO PHASE 2",
        "mode": "link",
        "links": [
            "9004aeb7ec1ed4bf",
            "d236e6eee53270f4"
        ],
        "x": 2115,
        "y": 120,
        "wires": []
    },
    {
        "id": "5c0e589cb02e5ad4",
        "type": "switch",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "Which phase",
        "property": "curPhase",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1970,
        "y": 140,
        "wires": [
            [
                "fe84ce88167ea094"
            ],
            [
                "6983c6fb1a960333"
            ]
        ]
    },
    {
        "id": "6983c6fb1a960333",
        "type": "link out",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "GOTO PHASE 3",
        "mode": "link",
        "links": [
            "d236e6eee53270f4"
        ],
        "x": 2115,
        "y": 160,
        "wires": []
    },
    {
        "id": "a429c99752090afe",
        "type": "inject",
        "z": "f6f035102302ba5a",
        "g": "11a9b9cee18f6b6c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "LTO",
        "payloadType": "str",
        "x": 250,
        "y": 1460,
        "wires": [
            [
                "223c3fe920a91621"
            ]
        ]
    },
    {
        "id": "8fa76cd3d132c117",
        "type": "function",
        "z": "f6f035102302ba5a",
        "g": "284c27310b25477c",
        "name": "Update Damage Global",
        "func": "//--- Basic variables\nvar input = msg.payload;\nvar theBldg = msg.payload.bldg;\nvar theWin = msg.payload.window;\nvar theFS = msg.payload.numFire;\n\n//--- Update Global Variables\nvar theGlobalString = theBldg + \".FS.Window\" + theWin + \"-BeforeWater\";\nglobal.set(theGlobalString,theFS);\n\n\n//--- Fin\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "b2d4ac6f1946502e",
        "type": "ui_switch",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "",
        "label": "LEFT - 1",
        "tooltip": "",
        "group": "e385e97cb63ad34f",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 180,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "daaf11927f2a4a8b",
        "type": "comment",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "Trees",
        "info": "",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "0290fd63a1e59327",
        "type": "comment",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "THESE ARE ALL JUST VISUALS!",
        "info": "",
        "x": 240,
        "y": 120,
        "wires": []
    },
    {
        "id": "2c989acbcca096b1",
        "type": "ui_switch",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "",
        "label": "LEFT - 2",
        "tooltip": "",
        "group": "e385e97cb63ad34f",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 180,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "4ff11dd0b666fb48",
        "type": "ui_switch",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "",
        "label": "LEFT - 3",
        "tooltip": "",
        "group": "e385e97cb63ad34f",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 180,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "9a1d6ba86b7f753b",
        "type": "ui_switch",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "",
        "label": "LEFT - 4",
        "tooltip": "",
        "group": "e385e97cb63ad34f",
        "order": 7,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 180,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "95d5bbb03ba2f1fb",
        "type": "ui_switch",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "",
        "label": "LEFT - 5",
        "tooltip": "",
        "group": "e385e97cb63ad34f",
        "order": 9,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 180,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "ab91ea138a0ca368",
        "type": "ui_switch",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "",
        "label": "LEFT - 6",
        "tooltip": "",
        "group": "e385e97cb63ad34f",
        "order": 11,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 180,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "f437b1f9f5574bab",
        "type": "ui_switch",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "",
        "label": "RIGHT - 1",
        "tooltip": "",
        "group": "e385e97cb63ad34f",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "4a3e2edb7b10cecb",
        "type": "ui_switch",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "",
        "label": "RIGHT -  2",
        "tooltip": "",
        "group": "e385e97cb63ad34f",
        "order": 4,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "af0d6f75fe37452a",
        "type": "ui_switch",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "",
        "label": "RIGHT - 3",
        "tooltip": "",
        "group": "e385e97cb63ad34f",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "10f28faa6d606765",
        "type": "ui_switch",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "",
        "label": "RIGHT - 4",
        "tooltip": "",
        "group": "e385e97cb63ad34f",
        "order": 8,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "dcac314a2015fdf2",
        "type": "ui_switch",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "",
        "label": "RIGHT - 5",
        "tooltip": "",
        "group": "e385e97cb63ad34f",
        "order": 10,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "48f1b9502311d765",
        "type": "ui_switch",
        "z": "d32826a1611e0622",
        "g": "cb9c0c3b1fe84ccc",
        "name": "",
        "label": "RIGHT - 6",
        "tooltip": "",
        "group": "e385e97cb63ad34f",
        "order": 12,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "425525fa50d52aef",
        "type": "comment",
        "z": "d32826a1611e0622",
        "g": "cba36710b3f0e691",
        "name": "Trenches",
        "info": "",
        "x": 140,
        "y": 540,
        "wires": []
    },
    {
        "id": "c04c6d32184aa86e",
        "type": "ui_dropdown",
        "z": "d32826a1611e0622",
        "g": "cba36710b3f0e691",
        "name": "",
        "label": "LEFT-TOP-1",
        "tooltip": "",
        "place": "Select option",
        "group": "13504c5753af441d",
        "order": 0,
        "width": "2",
        "height": "2",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "OFF",
                "value": "OFF",
                "type": "str"
            },
            {
                "label": "RED",
                "value": "RED",
                "type": "str"
            },
            {
                "label": "GREEN",
                "value": "GREEN",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 210,
        "y": 600,
        "wires": [
            [
                "40bd2073c91617a2"
            ]
        ]
    },
    {
        "id": "b69b44971de6fba0",
        "type": "mqtt out",
        "z": "d32826a1611e0622",
        "g": "cba36710b3f0e691",
        "name": "",
        "topic": "nodered/updatepixels/LTT",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bc90be16040a7d21",
        "x": 630,
        "y": 600,
        "wires": []
    },
    {
        "id": "40bd2073c91617a2",
        "type": "change",
        "z": "d32826a1611e0622",
        "g": "cba36710b3f0e691",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"whichLeds\":0,\"pixels\":\"111111111111111111111111111111\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 600,
        "wires": [
            [
                "b69b44971de6fba0"
            ]
        ]
    },
    {
        "id": "837b88b53ec5549a",
        "type": "mqtt in",
        "z": "f3ec5d556e86f8d0",
        "g": "e63633ec18181ba7",
        "name": "edgenode/initialization",
        "topic": "edgenode/initialization",
        "qos": "2",
        "datatype": "utf8",
        "broker": "5999f1d09afe1039",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 1320,
        "wires": [
            [
                "0faf666bf00276e9"
            ]
        ]
    },
    {
        "id": "5bdc6b89364fd15a",
        "type": "comment",
        "z": "f3ec5d556e86f8d0",
        "g": "a83bb00d46efe804",
        "name": "Config Setup Instructions",
        "info": "Config for the field contains the mapping of UUID (as written to each arduino board) and the node id as defined in the field diagram (containing LBO, RBO, etc)\n\n1. Write a text file in the following format:\nEDGE_UUID,EDGE_NODE_ID\n7452C441,LBO\n7452C442,LBM\n...\n\n2. Place on the raspberry pi in this location:\n/home/pi/field-config.csv\n    2.a -- emergency option, you can force a config down in the \"Write config to file\"  flow below -- see instructions there\n\n3. Create and/or drop then create the \"Create Config Table\"\n4. Run \"Load Config File into Config Table\"\n\n",
        "x": 270,
        "y": 700,
        "wires": []
    },
    {
        "id": "c7fe99b0e0506601",
        "type": "inject",
        "z": "f3ec5d556e86f8d0",
        "g": "a83bb00d46efe804",
        "name": "Load Config File into Config Table",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 880,
        "wires": [
            [
                "8c0e6a2a0a04fcd7"
            ]
        ],
        "info": "See instructions on top -- but file is:\n/home/pi/field-config.csv"
    },
    {
        "id": "8c0e6a2a0a04fcd7",
        "type": "file in",
        "z": "f3ec5d556e86f8d0",
        "g": "a83bb00d46efe804",
        "name": "Read Field Config",
        "filename": "/home/pi/field-config.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 470,
        "y": 920,
        "wires": [
            [
                "340a8ade18808c45"
            ]
        ]
    },
    {
        "id": "340a8ade18808c45",
        "type": "csv",
        "z": "f3ec5d556e86f8d0",
        "g": "a83bb00d46efe804",
        "name": "CSV Parse Field Config",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 920,
        "wires": [
            [
                "c58252a4cb097661"
            ]
        ]
    },
    {
        "id": "cf58eb77138066b2",
        "type": "debug",
        "z": "f3ec5d556e86f8d0",
        "g": "a83bb00d46efe804",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 820,
        "wires": []
    },
    {
        "id": "9dd0a2d0ffb6a743",
        "type": "inject",
        "z": "f3ec5d556e86f8d0",
        "g": "a83bb00d46efe804",
        "name": "Create Config Table",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 800,
        "wires": [
            [
                "9bca7655eb1d89cf"
            ]
        ]
    },
    {
        "id": "c58252a4cb097661",
        "type": "function",
        "z": "f3ec5d556e86f8d0",
        "g": "a83bb00d46efe804",
        "name": "Construct SQL",
        "func": "var o = msg.payload;\nvar sql = \"INSERT INTO \\\"FIELD_CONFIG\\\"(EDGE_UUID, EDGE_NODE_ID) VALUES(\\\"\"+o.EDGE_UUID+\"\\\", \\\"\"+o.EDGE_NODE_ID+\"\\\") ON CONFLICT(EDGE_UUID) DO UPDATE SET EDGE_NODE_ID = excluded.EDGE_NODE_ID;\";\nmsg.topic = sql;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 920,
        "wires": [
            [
                "4215a3196c228639"
            ]
        ]
    },
    {
        "id": "579c8c19ccab0937",
        "type": "inject",
        "z": "f3ec5d556e86f8d0",
        "g": "a83bb00d46efe804",
        "name": "Drop Config Table",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 760,
        "wires": [
            [
                "a74d42b7ae961652"
            ]
        ]
    },
    {
        "id": "ac6ab4bb77d73dc4",
        "type": "function",
        "z": "f3ec5d556e86f8d0",
        "g": "e63633ec18181ba7",
        "name": "Construct SQL",
        "func": "var o = msg.payload;\nvar sql = \"SELECT EDGE_NODE_ID, EDGE_UUID FROM FIELD_CONFIG WHERE EDGE_UUID='\" + o.uuid+ \"'\" ;\nmsg.topic = sql;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1320,
        "wires": [
            [
                "f4b7c4c243db620d"
            ]
        ]
    },
    {
        "id": "0faf666bf00276e9",
        "type": "json",
        "z": "f3ec5d556e86f8d0",
        "g": "e63633ec18181ba7",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 1320,
        "wires": [
            [
                "ac6ab4bb77d73dc4"
            ]
        ]
    },
    {
        "id": "2bcc56e6d241c3d9",
        "type": "function",
        "z": "f3ec5d556e86f8d0",
        "g": "e63633ec18181ba7",
        "name": "extract nodeid",
        "func": "\nvar nodeid = msg.payload[0].EDGE_NODE_ID;\nvar nodeuuid = msg.payload[0].EDGE_UUID;\nmsg.payload = nodeid;\nmsg.topic = \"nodered/initialization/\" + nodeuuid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1400,
        "wires": [
            [
                "feddd1768611c551"
            ]
        ]
    },
    {
        "id": "feddd1768611c551",
        "type": "mqtt out",
        "z": "f3ec5d556e86f8d0",
        "g": "e63633ec18181ba7",
        "name": "Publish Node ID to edge Node",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5999f1d09afe1039",
        "x": 930,
        "y": 1400,
        "wires": []
    },
    {
        "id": "b111193564f5a7a0",
        "type": "comment",
        "z": "f3ec5d556e86f8d0",
        "g": "e63633ec18181ba7",
        "name": "Initialize Edge Nodes ",
        "info": "Edge nodes report in when they come online with a UUID\nUUID is accessed from the DB, and returned as a Node ID (as defined by our field layout/diagram)\n\nSee Load Config File into Config Table flow for how to edit this\n\nEach Arduino needs a unique id written into eeprom using -> https://github.com/lanceriedel/burn-uuid-eeprom\n",
        "x": 280,
        "y": 1260,
        "wires": []
    },
    {
        "id": "97e2f252303bfcf3",
        "type": "inject",
        "z": "f3ec5d556e86f8d0",
        "g": "2024311963b7a70e",
        "name": "Write config to file",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[69,68,71,69,95,85,85,73,68,44,69,68,71,69,95,78,79,68,69,95,73,68,10,55,52,53,50,67,52,52,49,44,76,66,79,10,55,52,53,50,67,52,52,50,44,76,66,77,10,55,66,68,56,51,65,49,51,44,82,66,77,10,55,48,57,67,68,66,70,70,44,82,66,79]",
        "payloadType": "bin",
        "x": 1310,
        "y": 1380,
        "wires": [
            [
                "a1e6f1282aa6e63a"
            ]
        ],
        "info": "If you can't access the raspberry pi file system -- you can put the config here and force write it\nBUT -- you have to send as binary so that it retains the newlines\n\nFor example:\nEDGE_UUID,EDGE_NODE_ID\n7452C441,LBO\n7452C442,LBM\n7BD83A13,RBM\n709CDBFF,RBO\n\n\nBe sure to hit the elipses ...  so that you can see what you are typing.  \nAlso note that it will change to binary as soon as you send -- but it will work fine"
    },
    {
        "id": "a1e6f1282aa6e63a",
        "type": "file",
        "z": "f3ec5d556e86f8d0",
        "g": "2024311963b7a70e",
        "name": "",
        "filename": "/home/pi/field-config.csv",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1570,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "b70ae83c222fa7da",
        "type": "comment",
        "z": "f3ec5d556e86f8d0",
        "g": "2024311963b7a70e",
        "name": "Emergency Use! Write config -  (you need to load it after)",
        "info": "If you can't access the raspberry pi file system -- you can put the config here and force write it\nBUT -- you have to send as binary so that it retains the newlines\nFor example:\nEDGE_UUID,EDGE_NODE_ID\n7452C441,LBO\n7452C442,LBM\n7BD83A13,RBM\n709CDBFF,RBO\n\n\n\n\nBe sure to hit the elipses ...  so that you can see what you are typing.  \nAlso note that it will change to binary as soon as you send -- but it will work fine",
        "x": 1400,
        "y": 1340,
        "wires": []
    },
    {
        "id": "6f32fc52a4d53df8",
        "type": "link in",
        "z": "f3ec5d556e86f8d0",
        "g": "a83bb00d46efe804",
        "name": "Read Config",
        "links": [
            "5870cb8ac8846724",
            "f03d05829f9254f9"
        ],
        "x": 285,
        "y": 1020,
        "wires": [
            [
                "3dd25f169354ef22"
            ]
        ]
    },
    {
        "id": "ad34ea44766153db",
        "type": "link out",
        "z": "f3ec5d556e86f8d0",
        "g": "a83bb00d46efe804",
        "name": "link out 29",
        "links": [
            "4369b98b6d58fe86"
        ],
        "x": 615,
        "y": 1020,
        "wires": []
    },
    {
        "id": "161f3cee4bd60724",
        "type": "link in",
        "z": "f3ec5d556e86f8d0",
        "g": "e63633ec18181ba7",
        "name": "Insert UUI Entry",
        "links": [
            "99f3e6c97f2c0d2b"
        ],
        "x": 175,
        "y": 1180,
        "wires": [
            [
                "b1e8ab6feba986c9"
            ]
        ]
    },
    {
        "id": "b1e8ab6feba986c9",
        "type": "function",
        "z": "f3ec5d556e86f8d0",
        "g": "e63633ec18181ba7",
        "name": "Construct SQL",
        "func": "var o = msg.payload;\nvar sql = \"INSERT INTO \\\"FIELD_CONFIG\\\"(EDGE_UUID, EDGE_NODE_ID) VALUES(\\\"\"+o.EDGE_UUID+\"\\\", \\\"\"+o.EDGE_NODE_ID+\"\\\") ON CONFLICT(EDGE_UUID) DO UPDATE SET EDGE_NODE_ID = excluded.EDGE_NODE_ID;\";\nmsg.topic = sql;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1180,
        "wires": [
            [
                "4b72a159e1e82517"
            ]
        ]
    },
    {
        "id": "c79cb601a8c0ab17",
        "type": "comment",
        "z": "f3ec5d556e86f8d0",
        "g": "e63633ec18181ba7",
        "name": "Add Single Edge Node",
        "info": "Update single node entry",
        "x": 260,
        "y": 1140,
        "wires": []
    },
    {
        "id": "9f34def0af02efeb",
        "type": "function",
        "z": "f3ec5d556e86f8d0",
        "g": "bc92f0b2168e67b1",
        "name": "Construct SQL",
        "func": "var o = msg.payload;\nvar sql = \"DELETE FROM \\\"FIELD_CONFIG\\\" WHERE EDGE_UUID=\\\"\"+o.EDGE_UUID+\"\\\";\";\nmsg.topic = sql;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1160,
        "wires": [
            [
                "80e1d2d095f19693"
            ]
        ]
    },
    {
        "id": "ac5d35d999fc40b9",
        "type": "comment",
        "z": "f3ec5d556e86f8d0",
        "g": "bc92f0b2168e67b1",
        "name": "Remove Single Edge Node",
        "info": "Update single node entry",
        "x": 1310,
        "y": 1120,
        "wires": []
    },
    {
        "id": "cd811a5da6dea1c9",
        "type": "link in",
        "z": "f3ec5d556e86f8d0",
        "g": "bc92f0b2168e67b1",
        "name": "Delete UUI Entry",
        "links": [
            "9e93acca6dde891c"
        ],
        "x": 1215,
        "y": 1160,
        "wires": [
            [
                "9f34def0af02efeb"
            ]
        ]
    },
    {
        "id": "f86871afbc03993e",
        "type": "mqtt out",
        "z": "f3ec5d556e86f8d0",
        "g": "7ceda8dc6f5a8d60",
        "name": "Broadcast Laser Diff",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5999f1d09afe1039",
        "x": 800,
        "y": 1600,
        "wires": []
    },
    {
        "id": "91b03956f65107e7",
        "type": "function",
        "z": "f3ec5d556e86f8d0",
        "g": "7ceda8dc6f5a8d60",
        "name": "assemble mqtt message",
        "func": "var o = msg.payload;\n\nvar t = \"{ \\\"DETECTOR_DIFF\\\": \\\"\" + o.diff + \"\\\"}\";\nmsg.payload = t;\n//nodered/firescore/[node id]\nmsg.topic = \"nodered/laserdiff\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1600,
        "wires": [
            [
                "f86871afbc03993e"
            ]
        ]
    },
    {
        "id": "7a6d7007d9d5ec67",
        "type": "link in",
        "z": "f3ec5d556e86f8d0",
        "g": "7ceda8dc6f5a8d60",
        "name": "Broadcast Laser Diff Change",
        "links": [
            "c1f7e764f490f914"
        ],
        "x": 225,
        "y": 1600,
        "wires": [
            [
                "91b03956f65107e7"
            ]
        ]
    },
    {
        "id": "ccf03d13258bb4e3",
        "type": "comment",
        "z": "f3ec5d556e86f8d0",
        "g": "7ceda8dc6f5a8d60",
        "name": "Broadcast Laser Diff Change",
        "info": "",
        "x": 280,
        "y": 1540,
        "wires": []
    },
    {
        "id": "e2b27e9faf37bd1e",
        "type": "mqtt out",
        "z": "f3ec5d556e86f8d0",
        "g": "96cafb8e88dad064",
        "name": "Broadcast Query Latest Tare",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5999f1d09afe1039",
        "x": 820,
        "y": 1780,
        "wires": []
    },
    {
        "id": "6331f7057ebfd37c",
        "type": "function",
        "z": "f3ec5d556e86f8d0",
        "g": "96cafb8e88dad064",
        "name": "assemble mqtt message",
        "func": "var o = msg.payload;\n\nvar t = \"{ }\";\nmsg.payload = t;\n//nodered/firescore/[node id]\nmsg.topic = \"nodered/weighttare\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1780,
        "wires": [
            [
                "e2b27e9faf37bd1e"
            ]
        ]
    },
    {
        "id": "bc8a6edecc1a9a5c",
        "type": "link in",
        "z": "f3ec5d556e86f8d0",
        "g": "96cafb8e88dad064",
        "name": "Broadcast TareQuery",
        "links": [
            "c1f7e764f490f914",
            "4bdef8d87b5da823"
        ],
        "x": 225,
        "y": 1780,
        "wires": [
            [
                "6331f7057ebfd37c"
            ]
        ]
    },
    {
        "id": "c74fb766b19e2bf1",
        "type": "comment",
        "z": "f3ec5d556e86f8d0",
        "g": "96cafb8e88dad064",
        "name": "Broadcast Query for Weight Tare",
        "info": "Reported back through a separate message\nedgenode/latesttare/",
        "x": 290,
        "y": 1720,
        "wires": []
    },
    {
        "id": "f8aa15da571b3aae",
        "type": "ui_text",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "group": "a5991f3b10b51e7c",
        "order": 3,
        "width": "6",
        "height": "4",
        "name": "Loaded Values",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 700,
        "y": 220,
        "wires": []
    },
    {
        "id": "dfeaa41a75adbf51",
        "type": "ui_button",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "Submit",
        "group": "a5991f3b10b51e7c",
        "order": 4,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Current Config Dump",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 280,
        "y": 220,
        "wires": [
            [
                "5870cb8ac8846724",
                "a11c3ee5796d07f2"
            ]
        ]
    },
    {
        "id": "f4c6348e4bde4c20",
        "type": "ui_form",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "",
        "label": "Add UUID Mapping",
        "group": "a5991f3b10b51e7c",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Arduino UUID",
                "value": "EDGE_UUID",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Node ID",
                "value": "EDGE_NODE_ID",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "EDGE_UUID": "",
            "EDGE_NODE_ID": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 310,
        "y": 320,
        "wires": [
            [
                "99f3e6c97f2c0d2b",
                "a11c3ee5796d07f2"
            ]
        ]
    },
    {
        "id": "5870cb8ac8846724",
        "type": "link out",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "link out 28",
        "links": [
            "6f32fc52a4d53df8"
        ],
        "x": 425,
        "y": 220,
        "wires": []
    },
    {
        "id": "4369b98b6d58fe86",
        "type": "link in",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "Config Display",
        "links": [
            "ad34ea44766153db"
        ],
        "x": 555,
        "y": 220,
        "wires": [
            [
                "f8aa15da571b3aae"
            ]
        ]
    },
    {
        "id": "99f3e6c97f2c0d2b",
        "type": "link out",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "link out 30",
        "links": [
            "161f3cee4bd60724"
        ],
        "x": 505,
        "y": 320,
        "wires": []
    },
    {
        "id": "02673478ac90323a",
        "type": "comment",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "Dump Current Config",
        "info": "",
        "x": 320,
        "y": 160,
        "wires": []
    },
    {
        "id": "1dfa349788a1a948",
        "type": "ui_form",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "",
        "label": "Remove UUID Mapping",
        "group": "a5991f3b10b51e7c",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Arduino UUID",
                "value": "EDGE_UUID",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "EDGE_UUID": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 330,
        "y": 400,
        "wires": [
            [
                "9e93acca6dde891c",
                "a11c3ee5796d07f2"
            ]
        ]
    },
    {
        "id": "9e93acca6dde891c",
        "type": "link out",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "link out 31",
        "links": [
            "cd811a5da6dea1c9"
        ],
        "x": 535,
        "y": 400,
        "wires": []
    },
    {
        "id": "a11c3ee5796d07f2",
        "type": "delay",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 280,
        "wires": [
            [
                "f03d05829f9254f9"
            ]
        ]
    },
    {
        "id": "f03d05829f9254f9",
        "type": "link out",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "link out 33",
        "links": [
            "6f32fc52a4d53df8"
        ],
        "x": 755,
        "y": 280,
        "wires": []
    },
    {
        "id": "a3534a12592a4f1e",
        "type": "ui_form",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "Set Laser Detector Diff",
        "label": "Set Laser Detector Differential (default 500)",
        "group": "a5991f3b10b51e7c",
        "order": 5,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Diff",
                "value": "diff",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "diff": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 320,
        "y": 500,
        "wires": [
            [
                "c1f7e764f490f914"
            ]
        ]
    },
    {
        "id": "c1f7e764f490f914",
        "type": "link out",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "link out 52",
        "links": [
            "7a6d7007d9d5ec67",
            "bc8a6edecc1a9a5c"
        ],
        "x": 545,
        "y": 500,
        "wires": []
    },
    {
        "id": "4bdef8d87b5da823",
        "type": "link out",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "link out 53",
        "links": [
            "bc8a6edecc1a9a5c"
        ],
        "x": 595,
        "y": 560,
        "wires": []
    },
    {
        "id": "b15078312d3e61f5",
        "type": "ui_button",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "Query Latest Tare Value from all Field",
        "group": "a5991f3b10b51e7c",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Query Field For Latest Tares",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 370,
        "y": 560,
        "wires": [
            [
                "4bdef8d87b5da823"
            ]
        ]
    },
    {
        "id": "da8da29f2b800fa5",
        "type": "comment",
        "z": "f3ec5d556e86f8d0",
        "g": "96faa29525ade8f0",
        "name": "=== Field Config Dashboard Items",
        "info": "",
        "x": 300,
        "y": 100,
        "wires": []
    },
    {
        "id": "f4b7c4c243db620d",
        "type": "sqlite",
        "z": "f3ec5d556e86f8d0",
        "mydb": "6f6f2d0bf9d4b5e3",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Read Config Node ID",
        "x": 440,
        "y": 1400,
        "wires": [
            [
                "2bcc56e6d241c3d9"
            ]
        ]
    },
    {
        "id": "9bca7655eb1d89cf",
        "type": "sqlite",
        "z": "f3ec5d556e86f8d0",
        "mydb": "6f6f2d0bf9d4b5e3",
        "sqlquery": "fixed",
        "sql": "CREATE TABLE FIELD_CONFIG (\n  EDGE_UUID TEXT PRIMARY KEY,\n  EDGE_NODE_ID TEXT\n)",
        "name": "Create Config Table",
        "x": 690,
        "y": 800,
        "wires": [
            [
                "cf58eb77138066b2"
            ]
        ]
    },
    {
        "id": "4215a3196c228639",
        "type": "sqlite",
        "z": "f3ec5d556e86f8d0",
        "mydb": "6f6f2d0bf9d4b5e3",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "SqlLite Commands",
        "x": 1090,
        "y": 920,
        "wires": [
            [
                "cf58eb77138066b2"
            ]
        ]
    },
    {
        "id": "a74d42b7ae961652",
        "type": "sqlite",
        "z": "f3ec5d556e86f8d0",
        "mydb": "6f6f2d0bf9d4b5e3",
        "sqlquery": "fixed",
        "sql": "DROP TABLE IF EXISTS FIELD_CONFIG;",
        "name": "Drop Field Config Table",
        "x": 710,
        "y": 760,
        "wires": [
            [
                "cf58eb77138066b2"
            ]
        ]
    },
    {
        "id": "3dd25f169354ef22",
        "type": "sqlite",
        "z": "f3ec5d556e86f8d0",
        "mydb": "6f6f2d0bf9d4b5e3",
        "sqlquery": "fixed",
        "sql": "Select * from FIELD_CONFIG;",
        "name": "Read Config",
        "x": 450,
        "y": 1020,
        "wires": [
            [
                "ad34ea44766153db"
            ]
        ]
    },
    {
        "id": "4b72a159e1e82517",
        "type": "sqlite",
        "z": "f3ec5d556e86f8d0",
        "mydb": "6f6f2d0bf9d4b5e3",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "SqlLite Commands",
        "x": 510,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "80e1d2d095f19693",
        "type": "sqlite",
        "z": "f3ec5d556e86f8d0",
        "mydb": "6f6f2d0bf9d4b5e3",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "SqlLite Commands",
        "x": 1570,
        "y": 1160,
        "wires": [
            []
        ]
    }
]